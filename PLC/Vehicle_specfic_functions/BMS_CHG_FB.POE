FUNCTION_BLOCK BMS_CHG_FB
VAR_EXTERNAL

END_VAR

VAR_INPUT

END_VAR

VAR_OUTPUT

END_VAR

VAR
	StepDelay : TON;

	 ChageTimer : TON;
	 AutoChargeStep : INT := 0;
	 ChargePnt : DINT := 0;
END_VAR

(*Automatically declared*)
VAR_EXTERNAL
	PLC_RX15_BIT_BMS_NOCHG : BOOL;
	PLC_RX14_BIT_BMS_NG : BOOL;
	PLC_RX01_BIT_CHRGEMG : BOOL;
	PLC_RX15_BIT_BMS_CHGCMP : BOOL;
	PLC_RX14_BIT_BMS_THERMI : BOOL;
	G_BMS_ERROR : BOOL;
	PLC_RX03_BIT_CHRGREQL_A : BOOL;
	PLC_RX03_BIT_CHRGREQR_A : BOOL;
	OM_PLC_WORD2 : WORD;
	OM_PLC_WORD1 : WORD;
	PLC_RX14_BIT_BMS_COUPLE : BOOL;
	G_CHARGEOVERTIME : BOOL;
	STOPCHARGE : BOOL;
	PLC_RX14_BIT_BMS_OVER : BOOL;
	INPUT : INPUT_T;
	PLC_RX14_BIT_BMS_SHORT : BOOL;
	PLC_RX01_BIT_CHRGIDLE : BOOL;
	PLC_TX01_BIT_MANMODE : BOOL;
	PLC_RX14_BIT_BMS_BAT : BOOL;
	OM_PLC_W1_BIT_SETLOWBATT : BOOL;
	PLC_RX14_BIT_BMS_CT : BOOL;
	PLC_RX14_BIT_BMS_TEMPER : BOOL;
	NDC8 : NDC8_T;
	PLC_TX04_BIT_CHRGCMDL_A : BOOL;
	PLC_TX04_BIT_CHRGCMDR_A : BOOL;
	G_ERRORCODE : WORD;
END_VAR
(** {* Check BMS Error *} **)
(**  **)
(** g_BMS_Error := PLC_RX14_Bit_BMS_Short or **)
(** 				PLC_RX14_Bit_BMS_Over or **)
(** 				PLC_RX14_Bit_BMS_TempEr or **)
(** 				PLC_RX14_Bit_BMS_Thermi or **)
(** 				PLC_RX14_Bit_BMS_CT or **)
(** 				PLC_RX14_Bit_BMS_Couple or **)
(** 				PLC_RX14_Bit_BMS_Bat or **)
	(* assign - Stmt *)
	LD PLC_RX14_Bit_BMS_Short
	OR PLC_RX14_Bit_BMS_Over
	OR PLC_RX14_Bit_BMS_TempEr
	OR PLC_RX14_Bit_BMS_Thermi
	OR PLC_RX14_Bit_BMS_CT
	OR PLC_RX14_Bit_BMS_Couple
	OR PLC_RX14_Bit_BMS_Bat
	OR PLC_RX14_Bit_BMS_NG
	ST g_BMS_Error

(** 				PLC_RX14_Bit_BMS_NG; **)
(**  **)
(** {* Check Manual Charge *} **)
(**  **)
(** if PLC_RX03_Bit_ChrgReqL_A = TRUE and PLC_RX03_Bit_ChrgReqR_A = FALSE and PLC_TX01_Bit_ManMode = TRUE then **)
	(* if - Cond *)
	LD PLC_RX03_Bit_ChrgReqL_A
	EQ TRUE
	AND ( PLC_RX03_Bit_ChrgReqR_A
		EQ FALSE
	)
	AND ( PLC_TX01_Bit_ManMode
		EQ TRUE
	)
	JMPCN ODK_SKIP_000000000000001_000000000000001

		(* then - Stmts *)

(** 	PLC_TX04_Bit_ChrgCmdR_A := FALSE; **)
		(* assign - Stmt *)
		LD FALSE
		ST PLC_TX04_Bit_ChrgCmdR_A

(** 	NDC8.SDIO.DigitalOutput12_LEFTMGS := TRUE; **)
		(* assign - Stmt *)
		LD TRUE
		ST NDC8.SDIO.DigitalOutput12_LEFTMGS

(** 	PLC_TX04_Bit_ChrgCmdL_A := TRUE; **)
		(* assign - Stmt *)
		LD TRUE
		ST PLC_TX04_Bit_ChrgCmdL_A

(** 	StopCharge := TRUE; **)
		(* assign - Stmt *)
		LD TRUE
		ST StopCharge

		JMP ODK_END_IF_000000000000001

(** elsif ((PLC_RX03_Bit_ChrgReqL_A = FALSE and PLC_RX03_Bit_ChrgReqR_A = FALSE) or PLC_RX15_Bit_BMS_ChgCmp = TRUE) and PLC_TX01_Bit_ManMode = TRUE then **)
	(* elseif - Cond *) 
	ODK_SKIP_000000000000001_000000000000001:
	LD PLC_RX03_Bit_ChrgReqL_A
	EQ FALSE
	AND ( PLC_RX03_Bit_ChrgReqR_A
		EQ FALSE
	)
	OR ( PLC_RX15_Bit_BMS_ChgCmp
		EQ TRUE
	)
	AND ( PLC_TX01_Bit_ManMode
		EQ TRUE
	)
	JMPCN ODK_SKIP_000000000000001_000000000000002

		(* elsif - Stmts *)

(** 	NDC8.SDIO.DigitalOutput12_LEFTMGS := FALSE; **)
		(* assign - Stmt *)
		LD FALSE
		ST NDC8.SDIO.DigitalOutput12_LEFTMGS

(** 	PLC_TX04_Bit_ChrgCmdL_A := FALSE; **)
		(* assign - Stmt *)
		LD FALSE
		ST PLC_TX04_Bit_ChrgCmdL_A

(** 	StopCharge := FALSE; **)
		(* assign - Stmt *)
		LD FALSE
		ST StopCharge

		JMP ODK_END_IF_000000000000001

(** end_if; **)
	(* if - End *) 
	ODK_SKIP_000000000000001_000000000000002:
	ODK_END_IF_000000000000001:

(**  **)
(** if PLC_RX03_Bit_ChrgReqR_A = TRUE and PLC_RX03_Bit_ChrgReqL_A = FALSE and PLC_TX01_Bit_ManMode = TRUE then **)
	(* if - Cond *)
	LD PLC_RX03_Bit_ChrgReqR_A
	EQ TRUE
	AND ( PLC_RX03_Bit_ChrgReqL_A
		EQ FALSE
	)
	AND ( PLC_TX01_Bit_ManMode
		EQ TRUE
	)
	JMPCN ODK_SKIP_000000000000002_000000000000001

		(* then - Stmts *)

(** 	PLC_TX04_Bit_ChrgCmdL_A := FALSE; **)
		(* assign - Stmt *)
		LD FALSE
		ST PLC_TX04_Bit_ChrgCmdL_A

(** 	NDC8.SDIO.DigitalOutput16_RIGHTMGS := TRUE; **)
		(* assign - Stmt *)
		LD TRUE
		ST NDC8.SDIO.DigitalOutput16_RIGHTMGS

(** 	PLC_TX04_Bit_ChrgCmdR_A := TRUE; **)
		(* assign - Stmt *)
		LD TRUE
		ST PLC_TX04_Bit_ChrgCmdR_A

(** 	StopCharge := TRUE; **)
		(* assign - Stmt *)
		LD TRUE
		ST StopCharge

		JMP ODK_END_IF_000000000000002

(** elsif ((PLC_RX03_Bit_ChrgReqL_A = FALSE and PLC_RX03_Bit_ChrgReqR_A = FALSE) or PLC_RX15_Bit_BMS_ChgCmp = TRUE) and PLC_TX01_Bit_ManMode = TRUE then **)
	(* elseif - Cond *) 
	ODK_SKIP_000000000000002_000000000000001:
	LD PLC_RX03_Bit_ChrgReqL_A
	EQ FALSE
	AND ( PLC_RX03_Bit_ChrgReqR_A
		EQ FALSE
	)
	OR ( PLC_RX15_Bit_BMS_ChgCmp
		EQ TRUE
	)
	AND ( PLC_TX01_Bit_ManMode
		EQ TRUE
	)
	JMPCN ODK_SKIP_000000000000002_000000000000002

		(* elsif - Stmts *)

(** 	PLC_TX04_Bit_ChrgCmdL_A := FALSE; **)
		(* assign - Stmt *)
		LD FALSE
		ST PLC_TX04_Bit_ChrgCmdL_A

(** 	NDC8.SDIO.DigitalOutput16_RIGHTMGS := FALSE;	 **)
		(* assign - Stmt *)
		LD FALSE
		ST NDC8.SDIO.DigitalOutput16_RIGHTMGS

(** 	PLC_TX04_Bit_ChrgCmdR_A := FALSE; **)
		(* assign - Stmt *)
		LD FALSE
		ST PLC_TX04_Bit_ChrgCmdR_A

(** 	StopCharge := FALSE; **)
		(* assign - Stmt *)
		LD FALSE
		ST StopCharge

		JMP ODK_END_IF_000000000000002

(** end_if; **)
	(* if - End *) 
	ODK_SKIP_000000000000002_000000000000002:
	ODK_END_IF_000000000000002:

(**  **)
(**  **)
(** case AutoChargeStep of **)
(**  **)
(** 	0: **)
	(* case - Elm *) 
	ODK_SKIP_000000000000003_000000000000000:

	(* case - Cond *)
	LD AutoChargeStep
	EQ 0
	JMPC ODK_CASE_000000000000003_000000000000001

	JMP ODK_SKIP_000000000000003_000000000000001

	(* case - Stmts *) 
	ODK_CASE_000000000000003_000000000000001:

(** 		 **)
(** 		if (INPUT.Auto = TRUE and NDC8.Automatic.CurrentOrderMode = 1 and NDC8.Automatic.ExecDriveCommand = FALSE ) and 			 **)
(** 			(PLC_RX01_Bit_ChrgEmg = FALSE and g_BMS_Error = FALSE) and (NDC8.PointTrigger.Bit9_Chrg_Right = TRUE or NDC8.PointTrigger.Bit10_Chrg_Left = TRUE) and **)
(** 			not (NDC8.LoadDocking.OnTarget = TRUE and PLC_RX15_Bit_BMS_NoChg = TRUE) then **)
		(* if - Cond *)
		LD INPUT.Auto
		EQ TRUE
		AND ( NDC8.Automatic.CurrentOrderMode
			EQ 1
		)
		AND ( NDC8.Automatic.ExecDriveCommand
			EQ FALSE
		)
		AND ( PLC_RX01_Bit_ChrgEmg
			EQ FALSE
			AND ( g_BMS_Error
				EQ FALSE
			)
		)
		AND ( NDC8.PointTrigger.Bit9_Chrg_Right
			EQ TRUE
			OR ( NDC8.PointTrigger.Bit10_Chrg_Left
				EQ TRUE
			)
		)
		AND ( NDC8.LoadDocking.OnTarget
			EQ TRUE
			AND ( PLC_RX15_Bit_BMS_NoChg
				EQ TRUE
			)
			NOT
		)
		JMPCN ODK_SKIP_000000000000004_000000000000001

			(* then - Stmts *)

(** 			AutoChargeStep := 70; **)
			(* assign - Stmt *)
			LD 70
			ST AutoChargeStep

(** 			ChargePnt := NDC8.LayoutPosition.Point; **)
			(* assign - Stmt *)
			LD NDC8.LayoutPosition.Point
			ST ChargePnt

			JMP ODK_END_IF_000000000000004

(** 		end_if; **)
		(* if - End *) 
		ODK_SKIP_000000000000004_000000000000001:
		ODK_END_IF_000000000000004:

		JMP ODK_END_CASE_000000000000003

(**  **)
(** {* Charge the battery Host Order *} **)
(** 	70:	 **)
	(* case - Elm *) 
	ODK_SKIP_000000000000003_000000000000001:

	(* case - Cond *)
	LD AutoChargeStep
	EQ 70
	JMPC ODK_CASE_000000000000003_000000000000002

	JMP ODK_SKIP_000000000000003_000000000000002

	(* case - Stmts *) 
	ODK_CASE_000000000000003_000000000000002:

(** 		 **)
(** 		if INPUT.Auto = FALSE or NDC8.Automatic.CurrentOrderMode <> 1 then **)
		(* if - Cond *)
		LD INPUT.Auto
		EQ FALSE
		OR ( NDC8.Automatic.CurrentOrderMode
			NE 1
		)
		JMPCN ODK_SKIP_000000000000005_000000000000001

			(* then - Stmts *)

(** 			AutoChargeStep := 72; **)
			(* assign - Stmt *)
			LD 72
			ST AutoChargeStep

			JMP ODK_END_IF_000000000000005

(** 		end_if; **)
		(* if - End *) 
		ODK_SKIP_000000000000005_000000000000001:
		ODK_END_IF_000000000000005:

(** 		 **)
(** 		if PLC_RX01_Bit_ChrgEmg = TRUE or g_BMS_Error = TRUE then **)
		(* if - Cond *)
		LD PLC_RX01_Bit_ChrgEmg
		EQ TRUE
		OR ( g_BMS_Error
			EQ TRUE
		)
		JMPCN ODK_SKIP_000000000000006_000000000000001

			(* then - Stmts *)

(** 			AutoChargeStep := 999; **)
			(* assign - Stmt *)
			LD 999
			ST AutoChargeStep

			JMP ODK_END_IF_000000000000006

(** 		end_if; **)
		(* if - End *) 
		ODK_SKIP_000000000000006_000000000000001:
		ODK_END_IF_000000000000006:

(** 		 **)
(** 		NDC8.PLC_Application.TxStatusBit7_ChgComp := FALSE; **)
		(* assign - Stmt *)
		LD FALSE
		ST NDC8.PLC_Application.TxStatusBit7_ChgComp

(** 		StopCharge := TRUE; **)
		(* assign - Stmt *)
		LD TRUE
		ST StopCharge

(** 		 **)
(** 		{* Check Charge Idle*} **)
(** 		if PLC_RX01_Bit_ChrgIdle then  **)
		(* if - Cond *)
		LD PLC_RX01_Bit_ChrgIdle
		JMPCN ODK_SKIP_000000000000007_000000000000001

			(* then - Stmts *)

(** 			StepDelay(IN:=TRUE, PT:=t#2s); **)
			(* call - Stmt *)
			CAL StepDelay (
				IN := TRUE,
				PT := t#2s
			)

(** 			if StepDelay.Q then **)
			(* if - Cond *)
			LD StepDelay.Q
			JMPCN ODK_SKIP_000000000000008_000000000000001

				(* then - Stmts *)

(** 				StepDelay(IN:=FALSE); **)
				(* call - Stmt *)
				CAL StepDelay (
					IN := FALSE
				)

(** 				AutoChargeStep := 71; **)
				(* assign - Stmt *)
				LD 71
				ST AutoChargeStep

				JMP ODK_END_IF_000000000000008

(** 			end_if; **)
			(* if - End *) 
			ODK_SKIP_000000000000008_000000000000001:
			ODK_END_IF_000000000000008:

			JMP ODK_END_IF_000000000000007

(** 		 **)
(** 		end_if; **)
		(* if - End *) 
		ODK_SKIP_000000000000007_000000000000001:
		ODK_END_IF_000000000000007:

		JMP ODK_END_CASE_000000000000003

(** 		 **)
(** 		 **)
(** 	71: **)
	(* case - Elm *) 
	ODK_SKIP_000000000000003_000000000000002:

	(* case - Cond *)
	LD AutoChargeStep
	EQ 71
	JMPC ODK_CASE_000000000000003_000000000000003

	JMP ODK_SKIP_000000000000003_000000000000003

	(* case - Stmts *) 
	ODK_CASE_000000000000003_000000000000003:

(** 	 **)
(** 		if INPUT.Auto = FALSE or NDC8.Automatic.CurrentOrderMode <> 1 then **)
		(* if - Cond *)
		LD INPUT.Auto
		EQ FALSE
		OR ( NDC8.Automatic.CurrentOrderMode
			NE 1
		)
		JMPCN ODK_SKIP_000000000000009_000000000000001

			(* then - Stmts *)

(** 			AutoChargeStep := 72; **)
			(* assign - Stmt *)
			LD 72
			ST AutoChargeStep

			JMP ODK_END_IF_000000000000009

(** 		end_if; **)
		(* if - End *) 
		ODK_SKIP_000000000000009_000000000000001:
		ODK_END_IF_000000000000009:

(** 		 **)
(** 		if PLC_RX01_Bit_ChrgEmg = TRUE or g_BMS_Error = TRUE or g_ChargeOverTime = TRUE or g_ErrorCode <> 0 then **)
		(* if - Cond *)
		LD PLC_RX01_Bit_ChrgEmg
		EQ TRUE
		OR ( g_BMS_Error
			EQ TRUE
		)
		OR ( g_ChargeOverTime
			EQ TRUE
		)
		OR ( g_ErrorCode
			NE 0
		)
		JMPCN ODK_SKIP_00000000000000A_000000000000001

			(* then - Stmts *)

(** 			AutoChargeStep := 999; **)
			(* assign - Stmt *)
			LD 999
			ST AutoChargeStep

			JMP ODK_END_IF_00000000000000A

(** 		end_if; **)
		(* if - End *) 
		ODK_SKIP_00000000000000A_000000000000001:
		ODK_END_IF_00000000000000A:

(** 		IF NDC8.PointTrigger.Bit10_Chrg_Left = TRUE THEN **)
		(* if - Cond *)
		LD NDC8.PointTrigger.Bit10_Chrg_Left
		EQ TRUE
		JMPCN ODK_SKIP_00000000000000B_000000000000001

			(* then - Stmts *)

(** 			PLC_TX04_Bit_ChrgCmdL_A := TRUE; **)
			(* assign - Stmt *)
			LD TRUE
			ST PLC_TX04_Bit_ChrgCmdL_A

(** 			PLC_TX04_Bit_ChrgCmdR_A := FALSE; **)
			(* assign - Stmt *)
			LD FALSE
			ST PLC_TX04_Bit_ChrgCmdR_A

(** 			NDC8.SDIO.DigitalOutput12_LEFTMGS := TRUE; **)
			(* assign - Stmt *)
			LD TRUE
			ST NDC8.SDIO.DigitalOutput12_LEFTMGS

			JMP ODK_END_IF_00000000000000B

(** 		END_IF; **)
		(* if - End *) 
		ODK_SKIP_00000000000000B_000000000000001:
		ODK_END_IF_00000000000000B:

(** 		 **)
(** 		IF NDC8.PointTrigger.Bit9_Chrg_Right = TRUE THEN **)
		(* if - Cond *)
		LD NDC8.PointTrigger.Bit9_Chrg_Right
		EQ TRUE
		JMPCN ODK_SKIP_00000000000000C_000000000000001

			(* then - Stmts *)

(** 			PLC_TX04_Bit_ChrgCmdR_A := TRUE; **)
			(* assign - Stmt *)
			LD TRUE
			ST PLC_TX04_Bit_ChrgCmdR_A

(** 			PLC_TX04_Bit_ChrgCmdL_A := FALSE; **)
			(* assign - Stmt *)
			LD FALSE
			ST PLC_TX04_Bit_ChrgCmdL_A

(** 			NDC8.SDIO.DigitalOutput16_RIGHTMGS := TRUE; **)
			(* assign - Stmt *)
			LD TRUE
			ST NDC8.SDIO.DigitalOutput16_RIGHTMGS

			JMP ODK_END_IF_00000000000000C

(** 		END_IF; **)
		(* if - End *) 
		ODK_SKIP_00000000000000C_000000000000001:
		ODK_END_IF_00000000000000C:

(** 		 **)
(** 		OM_PLC_Word2 := INT_TO_WORD(NDC8.OMPLC.Stop_OM); **)
		(* assign - Stmt *)
		LD NDC8.OMPLC.Stop_OM
		INT_TO_WORD 
		ST OM_PLC_Word2

(**  **)
(**  **)
(** 		if NDC8.PointTrigger.Bit14_Full_Chrg = TRUE then **)
		(* if - Cond *)
		LD NDC8.PointTrigger.Bit14_Full_Chrg
		EQ TRUE
		JMPCN ODK_SKIP_00000000000000D_000000000000001

			(* then - Stmts *)

(** 			if (PLC_RX15_Bit_BMS_ChgCmp or PLC_RX01_Bit_ChrgEmg) then **)
			(* if - Cond *)
			LD PLC_RX15_Bit_BMS_ChgCmp
			OR PLC_RX01_Bit_ChrgEmg
			JMPCN ODK_SKIP_00000000000000E_000000000000001

				(* then - Stmts *)

(** 				AutoChargeStep := 72; **)
				(* assign - Stmt *)
				LD 72
				ST AutoChargeStep

				JMP ODK_END_IF_00000000000000E

(** 			end_if; **)
			(* if - End *) 
			ODK_SKIP_00000000000000E_000000000000001:
			ODK_END_IF_00000000000000E:

			JMP ODK_END_IF_00000000000000D

(** 		else **)
		(* else *) 
		ODK_SKIP_00000000000000D_000000000000001:

			(* else - Stmts *)

(** 			if (NDC8.Automatic.ExecDriveCommand = TRUE or PLC_RX15_Bit_BMS_ChgCmp = TRUE or PLC_RX01_Bit_ChrgEmg) then **)
			(* if - Cond *)
			LD NDC8.Automatic.ExecDriveCommand
			EQ TRUE
			OR ( PLC_RX15_Bit_BMS_ChgCmp
				EQ TRUE
			)
			OR PLC_RX01_Bit_ChrgEmg
			JMPCN ODK_SKIP_00000000000000F_000000000000001

				(* then - Stmts *)

(** 				AutoChargeStep := 72; **)
				(* assign - Stmt *)
				LD 72
				ST AutoChargeStep

				JMP ODK_END_IF_00000000000000F

(** 			end_if; **)
			(* if - End *) 
			ODK_SKIP_00000000000000F_000000000000001:
			ODK_END_IF_00000000000000F:

(** 		end_if; **)
		(* if - End *) 
		ODK_END_IF_00000000000000D:

		JMP ODK_END_CASE_000000000000003

(** 		 **)
(** 	72: **)
	(* case - Elm *) 
	ODK_SKIP_000000000000003_000000000000003:

	(* case - Cond *)
	LD AutoChargeStep
	EQ 72
	JMPC ODK_CASE_000000000000003_000000000000004

	JMP ODK_SKIP_000000000000003_000000000000004

	(* case - Stmts *) 
	ODK_CASE_000000000000003_000000000000004:

(** 	 **)
(** 		if PLC_RX01_Bit_ChrgEmg = TRUE or g_BMS_Error = TRUE then **)
		(* if - Cond *)
		LD PLC_RX01_Bit_ChrgEmg
		EQ TRUE
		OR ( g_BMS_Error
			EQ TRUE
		)
		JMPCN ODK_SKIP_00000000000000G_000000000000001

			(* then - Stmts *)

(** 			AutoChargeStep := 999; **)
			(* assign - Stmt *)
			LD 999
			ST AutoChargeStep

			JMP ODK_END_IF_00000000000000G

(** 		end_if; **)
		(* if - End *) 
		ODK_SKIP_00000000000000G_000000000000001:
		ODK_END_IF_00000000000000G:

(** 		 **)
(** 		PLC_TX04_Bit_ChrgCmdL_A := FALSE; **)
		(* assign - Stmt *)
		LD FALSE
		ST PLC_TX04_Bit_ChrgCmdL_A

(** 		 **)
(** 		PLC_TX04_Bit_ChrgCmdR_A := FALSE; **)
		(* assign - Stmt *)
		LD FALSE
		ST PLC_TX04_Bit_ChrgCmdR_A

(** 			 **)
(** 		NDC8.SDIO.DigitalOutput16_RIGHTMGS := FALSE; **)
		(* assign - Stmt *)
		LD FALSE
		ST NDC8.SDIO.DigitalOutput16_RIGHTMGS

(** 		 **)
(** 		NDC8.SDIO.DigitalOutput12_LEFTMGS := FALSE; **)
		(* assign - Stmt *)
		LD FALSE
		ST NDC8.SDIO.DigitalOutput12_LEFTMGS

(** 		 **)
(** 		NDC8.PLC_Application.TxStatusBit7_ChgComp := TRUE; **)
		(* assign - Stmt *)
		LD TRUE
		ST NDC8.PLC_Application.TxStatusBit7_ChgComp

(** 	 **)
(** 		OM_PLC_Word1 := INT_TO_WORD(NDC8.OMPLC.ChargeOM); **)
		(* assign - Stmt *)
		LD NDC8.OMPLC.ChargeOM
		INT_TO_WORD 
		ST OM_PLC_Word1

(**  **)
(** 		OM_PLC_W1_Bit_SetLowBatt := FALSE; **)
		(* assign - Stmt *)
		LD FALSE
		ST OM_PLC_W1_Bit_SetLowBatt

(**  **)
(** 		NDC8.OMPLC.ChargeOM := WORD_TO_INT(OM_PLC_Word1); **)
		(* assign - Stmt *)
		LD OM_PLC_Word1
		WORD_TO_INT 
		ST NDC8.OMPLC.ChargeOM

(** 	 **)
(** 		StepDelay(IN:=TRUE, PT:=t#5s); **)
		(* call - Stmt *)
		CAL StepDelay (
			IN := TRUE,
			PT := t#5s
		)

(** 		if StepDelay.Q then **)
		(* if - Cond *)
		LD StepDelay.Q
		JMPCN ODK_SKIP_00000000000000H_000000000000001

			(* then - Stmts *)

(** 			StepDelay(IN:=FALSE); **)
			(* call - Stmt *)
			CAL StepDelay (
				IN := FALSE
			)

(** 			NDC8.PLC_Application.TxStatusBit7_ChgComp := FALSE; **)
			(* assign - Stmt *)
			LD FALSE
			ST NDC8.PLC_Application.TxStatusBit7_ChgComp

(** 			AutoChargeStep := 73; **)
			(* assign - Stmt *)
			LD 73
			ST AutoChargeStep

			JMP ODK_END_IF_00000000000000H

(** 		end_if; **)
		(* if - End *) 
		ODK_SKIP_00000000000000H_000000000000001:
		ODK_END_IF_00000000000000H:

		JMP ODK_END_CASE_000000000000003

(** 		 **)
(** 	73: **)
	(* case - Elm *) 
	ODK_SKIP_000000000000003_000000000000004:

	(* case - Cond *)
	LD AutoChargeStep
	EQ 73
	JMPC ODK_CASE_000000000000003_000000000000005

	JMP ODK_SKIP_000000000000003_000000000000005

	(* case - Stmts *) 
	ODK_CASE_000000000000003_000000000000005:

(** 		if PLC_RX01_Bit_ChrgEmg = TRUE or g_BMS_Error = TRUE then **)
		(* if - Cond *)
		LD PLC_RX01_Bit_ChrgEmg
		EQ TRUE
		OR ( g_BMS_Error
			EQ TRUE
		)
		JMPCN ODK_SKIP_00000000000000I_000000000000001

			(* then - Stmts *)

(** 			AutoChargeStep := 999; **)
			(* assign - Stmt *)
			LD 999
			ST AutoChargeStep

			JMP ODK_END_IF_00000000000000I

(** 		end_if; **)
		(* if - End *) 
		ODK_SKIP_00000000000000I_000000000000001:
		ODK_END_IF_00000000000000I:

(** 		 **)
(** 		if PLC_RX01_Bit_ChrgIdle then  **)
		(* if - Cond *)
		LD PLC_RX01_Bit_ChrgIdle
		JMPCN ODK_SKIP_00000000000000J_000000000000001

			(* then - Stmts *)

(** 			StepDelay(IN:=TRUE, PT:=t#1s); **)
			(* call - Stmt *)
			CAL StepDelay (
				IN := TRUE,
				PT := t#1s
			)

(** 			if StepDelay.Q then **)
			(* if - Cond *)
			LD StepDelay.Q
			JMPCN ODK_SKIP_00000000000000K_000000000000001

				(* then - Stmts *)

(** 				StepDelay(IN:=FALSE); **)
				(* call - Stmt *)
				CAL StepDelay (
					IN := FALSE
				)

(** 				StopCharge := FALSE; **)
				(* assign - Stmt *)
				LD FALSE
				ST StopCharge

(** 				AutoChargeStep := 74; **)
				(* assign - Stmt *)
				LD 74
				ST AutoChargeStep

				JMP ODK_END_IF_00000000000000K

(** 			end_if; **)
			(* if - End *) 
			ODK_SKIP_00000000000000K_000000000000001:
			ODK_END_IF_00000000000000K:

			JMP ODK_END_IF_00000000000000J

(** 		end_if; **)
		(* if - End *) 
		ODK_SKIP_00000000000000J_000000000000001:
		ODK_END_IF_00000000000000J:

		JMP ODK_END_CASE_000000000000003

(** 		 **)
(** 	74: **)
	(* case - Elm *) 
	ODK_SKIP_000000000000003_000000000000005:

	(* case - Cond *)
	LD AutoChargeStep
	EQ 74
	JMPC ODK_CASE_000000000000003_000000000000006

	JMP ODK_SKIP_000000000000003_000000000000006

	(* case - Stmts *) 
	ODK_CASE_000000000000003_000000000000006:

(** 		if PLC_RX01_Bit_ChrgEmg = TRUE or g_BMS_Error = TRUE then **)
		(* if - Cond *)
		LD PLC_RX01_Bit_ChrgEmg
		EQ TRUE
		OR ( g_BMS_Error
			EQ TRUE
		)
		JMPCN ODK_SKIP_00000000000000L_000000000000001

			(* then - Stmts *)

(** 			AutoChargeStep := 999; **)
			(* assign - Stmt *)
			LD 999
			ST AutoChargeStep

			JMP ODK_END_IF_00000000000000L

(** 		end_if; **)
		(* if - End *) 
		ODK_SKIP_00000000000000L_000000000000001:
		ODK_END_IF_00000000000000L:

(** 		 **)
(** 		if INPUT.Auto = FALSE or NDC8.Automatic.CurrentOrderMode <> 1 then **)
		(* if - Cond *)
		LD INPUT.Auto
		EQ FALSE
		OR ( NDC8.Automatic.CurrentOrderMode
			NE 1
		)
		JMPCN ODK_SKIP_00000000000000M_000000000000001

			(* then - Stmts *)

(** 			AutoChargeStep := 0; **)
			(* assign - Stmt *)
			LD 0
			ST AutoChargeStep

			JMP ODK_END_IF_00000000000000M

(** 		end_if; **)
		(* if - End *) 
		ODK_SKIP_00000000000000M_000000000000001:
		ODK_END_IF_00000000000000M:

(** 		 **)
(** 		if NDC8.LayoutPosition.Point <> ChargePnt or NDC8.PLC_Application.TxStatusBit4_LowBatt = TRUE then **)
		(* if - Cond *)
		LD NDC8.LayoutPosition.Point
		NE ChargePnt
		OR ( NDC8.PLC_Application.TxStatusBit4_LowBatt
			EQ TRUE
		)
		JMPCN ODK_SKIP_00000000000000N_000000000000001

			(* then - Stmts *)

(** 			AutoChargeStep := 0; **)
			(* assign - Stmt *)
			LD 0
			ST AutoChargeStep

			JMP ODK_END_IF_00000000000000N

(** 		end_if; **)
		(* if - End *) 
		ODK_SKIP_00000000000000N_000000000000001:
		ODK_END_IF_00000000000000N:

		JMP ODK_END_CASE_000000000000003

(** 		 **)
(** 		 **)
(** 	999: **)
	(* case - Elm *) 
	ODK_SKIP_000000000000003_000000000000006:

	(* case - Cond *)
	LD AutoChargeStep
	EQ 999
	JMPC ODK_CASE_000000000000003_000000000000007

	JMP ODK_SKIP_000000000000003_000000000000007

	(* case - Stmts *) 
	ODK_CASE_000000000000003_000000000000007:

(** 		PLC_TX04_Bit_ChrgCmdL_A := FALSE; **)
		(* assign - Stmt *)
		LD FALSE
		ST PLC_TX04_Bit_ChrgCmdL_A

(** 		 **)
(** 		PLC_TX04_Bit_ChrgCmdR_A := FALSE; **)
		(* assign - Stmt *)
		LD FALSE
		ST PLC_TX04_Bit_ChrgCmdR_A

(** 			 **)
(** 		NDC8.SDIO.DigitalOutput16_RIGHTMGS := FALSE; **)
		(* assign - Stmt *)
		LD FALSE
		ST NDC8.SDIO.DigitalOutput16_RIGHTMGS

(** 		 **)
(** 		NDC8.SDIO.DigitalOutput12_LEFTMGS := FALSE; **)
		(* assign - Stmt *)
		LD FALSE
		ST NDC8.SDIO.DigitalOutput12_LEFTMGS

(** 		 **)
(** 		NDC8.PLC_Application.TxStatusBit7_ChgComp := TRUE; **)
		(* assign - Stmt *)
		LD TRUE
		ST NDC8.PLC_Application.TxStatusBit7_ChgComp

(** 	 **)
(** 		OM_PLC_Word1 := INT_TO_WORD(NDC8.OMPLC.ChargeOM); **)
		(* assign - Stmt *)
		LD NDC8.OMPLC.ChargeOM
		INT_TO_WORD 
		ST OM_PLC_Word1

(**  **)
(** 		OM_PLC_W1_Bit_SetLowBatt := FALSE; **)
		(* assign - Stmt *)
		LD FALSE
		ST OM_PLC_W1_Bit_SetLowBatt

(**  **)
(** 		NDC8.OMPLC.ChargeOM := WORD_TO_INT(OM_PLC_Word1); **)
		(* assign - Stmt *)
		LD OM_PLC_Word1
		WORD_TO_INT 
		ST NDC8.OMPLC.ChargeOM

(** 	 **)
(** 		StopCharge := FALSE; **)
		(* assign - Stmt *)
		LD FALSE
		ST StopCharge

(** 		 **)
(** 		AutoChargeStep := 0; **)
		(* assign - Stmt *)
		LD 0
		ST AutoChargeStep

		JMP ODK_END_CASE_000000000000003

(** 		 **)
(** 	 **)
(**  **)
(** end_case; **)
	(* case - End *) 
	ODK_SKIP_000000000000003_000000000000007:
	ODK_END_CASE_000000000000003:

(**  **)
(** {* Charge Over Time Check *} **)
(** IF PLC_TX04_Bit_ChrgCmdR_A = TRUE and PLC_TX04_Bit_ChrgCmdL_A = FALSE THEN **)
	(* if - Cond *)
	LD PLC_TX04_Bit_ChrgCmdR_A
	EQ TRUE
	AND ( PLC_TX04_Bit_ChrgCmdL_A
		EQ FALSE
	)
	JMPCN ODK_SKIP_00000000000000O_000000000000001

		(* then - Stmts *)

(** 	ChageTimer(IN:= NDC8.SDIO.DigitalOutput16_RIGHTMGS, PT:=t#1800s); **)
		(* call - Stmt *)
		CAL ChageTimer (
			IN := NDC8.SDIO.DigitalOutput16_RIGHTMGS,
			PT := t#1800s
		)

(** 	 **)
(** 	if ChageTimer.Q then **)
		(* if - Cond *)
		LD ChageTimer.Q
		JMPCN ODK_SKIP_00000000000000P_000000000000001

			(* then - Stmts *)

(** 		g_ChargeOverTime := TRUE; **)
			(* assign - Stmt *)
			LD TRUE
			ST g_ChargeOverTime

			JMP ODK_END_IF_00000000000000P

(** 	end_if; **)
		(* if - End *) 
		ODK_SKIP_00000000000000P_000000000000001:
		ODK_END_IF_00000000000000P:

(** 	 **)
(** 	if NDC8.SDIO.DigitalOutput16_RIGHTMGS = FALSE then **)
		(* if - Cond *)
		LD NDC8.SDIO.DigitalOutput16_RIGHTMGS
		EQ FALSE
		JMPCN ODK_SKIP_00000000000000Q_000000000000001

			(* then - Stmts *)

(** 		g_ChargeOverTime := FALSE; **)
			(* assign - Stmt *)
			LD FALSE
			ST g_ChargeOverTime

			JMP ODK_END_IF_00000000000000Q

(** 	end_if; **)
		(* if - End *) 
		ODK_SKIP_00000000000000Q_000000000000001:
		ODK_END_IF_00000000000000Q:

		JMP ODK_END_IF_00000000000000O

(** END_IF; **)
	(* if - End *) 
	ODK_SKIP_00000000000000O_000000000000001:
	ODK_END_IF_00000000000000O:

(** IF PLC_TX04_Bit_ChrgCmdR_A = FALSE and PLC_TX04_Bit_ChrgCmdL_A = TRUE THEN **)
	(* if - Cond *)
	LD PLC_TX04_Bit_ChrgCmdR_A
	EQ FALSE
	AND ( PLC_TX04_Bit_ChrgCmdL_A
		EQ TRUE
	)
	JMPCN ODK_SKIP_00000000000000R_000000000000001

		(* then - Stmts *)

(** 	ChageTimer(IN:= NDC8.SDIO.DigitalOutput12_LEFTMGS, PT:=t#1800s); **)
		(* call - Stmt *)
		CAL ChageTimer (
			IN := NDC8.SDIO.DigitalOutput12_LEFTMGS,
			PT := t#1800s
		)

(** 	 **)
(** 	if ChageTimer.Q then **)
		(* if - Cond *)
		LD ChageTimer.Q
		JMPCN ODK_SKIP_00000000000000S_000000000000001

			(* then - Stmts *)

(** 		g_ChargeOverTime := TRUE; **)
			(* assign - Stmt *)
			LD TRUE
			ST g_ChargeOverTime

			JMP ODK_END_IF_00000000000000S

(** 	end_if; **)
		(* if - End *) 
		ODK_SKIP_00000000000000S_000000000000001:
		ODK_END_IF_00000000000000S:

(** 	 **)
(** 	if NDC8.SDIO.DigitalOutput12_LEFTMGS = FALSE then **)
		(* if - Cond *)
		LD NDC8.SDIO.DigitalOutput12_LEFTMGS
		EQ FALSE
		JMPCN ODK_SKIP_00000000000000T_000000000000001

			(* then - Stmts *)

(** 		g_ChargeOverTime := FALSE; **)
			(* assign - Stmt *)
			LD FALSE
			ST g_ChargeOverTime

			JMP ODK_END_IF_00000000000000T

(** 	end_if; **)
		(* if - End *) 
		ODK_SKIP_00000000000000T_000000000000001:
		ODK_END_IF_00000000000000T:

		JMP ODK_END_IF_00000000000000R

(** END_IF; **)
	(* if - End *) 
	ODK_SKIP_00000000000000R_000000000000001:
	ODK_END_IF_00000000000000R:

(** 	 **)
(** 	 **)
(** {* Check BMS Error Status *} **)
(** if NDC8.SDIO.DigitalInput2_BTN_RST = FALSE and **)
(** 	(PLC_RX01_Bit_ChrgEmg = TRUE **)
(** 	or g_BMS_Error = TRUE **)
(** 	or PLC_RX15_Bit_BMS_ChgCmp = TRUE  **)
(** 	or g_ChargeOverTime) then	 **)
	(* if - Cond *)
	LD NDC8.SDIO.DigitalInput2_BTN_RST
	EQ FALSE
	AND ( PLC_RX01_Bit_ChrgEmg
		EQ TRUE
		OR ( g_BMS_Error
			EQ TRUE
		)
		OR ( PLC_RX15_Bit_BMS_ChgCmp
			EQ TRUE
		)
		OR g_ChargeOverTime
	)
	JMPCN ODK_SKIP_00000000000000U_000000000000001

		(* then - Stmts *)

(** 		PLC_TX04_Bit_ChrgCmdL_A := FALSE; **)
		(* assign - Stmt *)
		LD FALSE
		ST PLC_TX04_Bit_ChrgCmdL_A

(** 		PLC_TX04_Bit_ChrgCmdR_A := FALSE; **)
		(* assign - Stmt *)
		LD FALSE
		ST PLC_TX04_Bit_ChrgCmdR_A

(** 		NDC8.SDIO.DigitalOutput12_LEFTMGS := FALSE; **)
		(* assign - Stmt *)
		LD FALSE
		ST NDC8.SDIO.DigitalOutput12_LEFTMGS

(** 		NDC8.SDIO.DigitalOutput16_RIGHTMGS := FALSE; **)
		(* assign - Stmt *)
		LD FALSE
		ST NDC8.SDIO.DigitalOutput16_RIGHTMGS

		JMP ODK_END_IF_00000000000000U

(** end_if; **)
	(* if - End *) 
	ODK_SKIP_00000000000000U_000000000000001:
	ODK_END_IF_00000000000000U:

(**  **)
(**  **)
(** if PLC_TX04_Bit_ChrgCmdL_A = TRUE OR PLC_TX04_Bit_ChrgCmdR_A then **)
	(* if - Cond *)
	LD PLC_TX04_Bit_ChrgCmdL_A
	EQ TRUE
	OR PLC_TX04_Bit_ChrgCmdR_A
	JMPCN ODK_SKIP_00000000000000V_000000000000001

		(* then - Stmts *)

(** 	StopCharge := TRUE; **)
		(* assign - Stmt *)
		LD TRUE
		ST StopCharge

		JMP ODK_END_IF_00000000000000V

(** end_if; **)
	(* if - End *) 
	ODK_SKIP_00000000000000V_000000000000001:
	ODK_END_IF_00000000000000V:

(**  **)
(** {* G5 ACC70 CGERRORCNT.NPU  *} **)
(**  **)
(** if not NDC8.VehicleControl.Estop then **)
	(* if - Cond *)
	LD NDC8.VehicleControl.Estop
	NOT
	JMPCN ODK_SKIP_00000000000000W_000000000000001

		(* then - Stmts *)

(** 	if g_ErrorCode <> 174 then **)
		(* if - Cond *)
		LD g_ErrorCode
		NE 174
		JMPCN ODK_SKIP_00000000000000X_000000000000001

			(* then - Stmts *)

			JMP ODK_END_IF_00000000000000X

(** 		; **)
(** 	end_if; **)
		(* if - End *) 
		ODK_SKIP_00000000000000X_000000000000001:
		ODK_END_IF_00000000000000X:

		JMP ODK_END_IF_00000000000000W

(** end_if; **)
	(* if - End *) 
	ODK_SKIP_00000000000000W_000000000000001:
	ODK_END_IF_00000000000000W:

(**  **)
(**  **)
(**  **)
(**  **)
(**  **)
(**  **)
(**  **)
(**  **)

END_FUNCTION_BLOCK