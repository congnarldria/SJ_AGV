FUNCTION_BLOCK BMS_CHG_FB
VAR_EXTERNAL

END_VAR

VAR_INPUT

END_VAR

VAR_OUTPUT

END_VAR

VAR
	StepDelay : TON;
	ManualStepDelay : TON;
	CheckChargeDoneStepDelay : TON;
	
	 ChageTimer : TON;
	 ChargeFullFlag : BOOL;
	 
	 AutoChargeStep : INT := 0;
	 ChargePnt : DINT := 0;
	 
	 FastChargeFlag : BOOL;
	 FastChargeTimer : TON;
	 FastChargeTimeOver : BOOL;
	 	 
END_VAR

(*Automatically declared*)
VAR_EXTERNAL
	G_CHARGEDONE : BOOL;
	G_BATTERYVOLTAGE : DINT;
	PLC_RX01_BIT_CHRGEMG : BOOL;
	PLC_RX03_BIT_CHRGREQL_A : BOOL;
	PLC_RX03_BIT_CHRGREQR_A : BOOL;
	PLC_TX01_BIT_CHRGSELL_A : BOOL;
	PLC_TX01_BIT_CHRGSELR_A : BOOL;
	OM_PLC_WORD9 : WORD;
	OM_PLC_WORD2 : WORD;
	OM_PLC_WORD1 : WORD;
	PLC_RX03_BIT_CHARGING_R : BOOL;
	PLC_RX03_BIT_CHARGING_L : BOOL;
	G_BATTLIM_NG : BOOL;
	G_CHARGEOVERTIME : BOOL;
	STOPCHARGE : BOOL;
	G_CHARGETEMPERR : BOOL;
	INPUT : INPUT_T;
	PLC_TX01_BIT_CANCEL_ST2 : BOOL;
	PLC_RX03_BIT_CP_HP : BOOL;
	PLC_TX01_BIT_MANMODE : BOOL;
	OM_PLC_W9_BIT_ENABLE_ERR : BOOL;
	OM_PLC_W1_BIT_SETLOWBATT : BOOL;
	NDC8 : NDC8_T;
	OM_PLC_W9_BIT_CHGP_ERR : BOOL;
	PLC_RX03_BIT_ROUND_CHGP : BOOL;
	PLC_RX01_BIT_CHRGBRK : BOOL;
	PLC_TX04_BIT_CHRGCMDL_A : BOOL;
	PLC_TX04_BIT_CHRGCMDR_A : BOOL;
	PLC_TX01_BIT_TRCHG_PNT : BOOL;
END_VAR
(** {* Check Manual Charge *} **)
(**  **)
(** if PLC_RX03_Bit_ChrgReqL_A = TRUE and PLC_TX01_Bit_ManMode = TRUE and PLC_RX03_Bit_Charging_L = FALSE then **)
	(* if - Cond *)
	LD PLC_RX03_Bit_ChrgReqL_A
	EQ TRUE
	AND ( PLC_TX01_Bit_ManMode
		EQ TRUE
	)
	AND ( PLC_RX03_Bit_Charging_L
		EQ FALSE
	)
	JMPCN ODK_SKIP_000000000000001_000000000000001

		(* then - Stmts *)

(** 	NDC8.SDIO.DigitalOutput16_Charger := TRUE; **)
		(* assign - Stmt *)
		LD TRUE
		ST NDC8.SDIO.DigitalOutput16_Charger

(** 	PLC_TX01_Bit_ChrgSelL_A := TRUE; **)
		(* assign - Stmt *)
		LD TRUE
		ST PLC_TX01_Bit_ChrgSelL_A

(** 	StopCharge := TRUE; **)
		(* assign - Stmt *)
		LD TRUE
		ST StopCharge

(** 	 **)
(** 	 **)
(** 	{* Full Charge Point check *} **)
(** 	if NDC8.PointTrigger.Bit14_Full_Chrg = FALSE then **)
		(* if - Cond *)
		LD NDC8.PointTrigger.Bit14_Full_Chrg
		EQ FALSE
		JMPCN ODK_SKIP_000000000000002_000000000000001

			(* then - Stmts *)

(** 		PLC_TX01_Bit_TRChg_Pnt := TRUE; **)
			(* assign - Stmt *)
			LD TRUE
			ST PLC_TX01_Bit_TRChg_Pnt

			JMP ODK_END_IF_000000000000002

(** 	else **)
		(* else *) 
		ODK_SKIP_000000000000002_000000000000001:

			(* else - Stmts *)

(** 		PLC_TX01_Bit_TRChg_Pnt := FALSE; **)
			(* assign - Stmt *)
			LD FALSE
			ST PLC_TX01_Bit_TRChg_Pnt

(** 	end_if; **)
		(* if - End *) 
		ODK_END_IF_000000000000002:

(** 	 **)
(** 	g_BattLim_NG := FALSE; **)
		(* assign - Stmt *)
		LD FALSE
		ST g_BattLim_NG

(** 	INPUT.LowBattery := FALSE; **)
		(* assign - Stmt *)
		LD FALSE
		ST INPUT.LowBattery

(** 	NDC8.Userdefined.LowBatSim := FALSE; **)
		(* assign - Stmt *)
		LD FALSE
		ST NDC8.Userdefined.LowBatSim

(** 	OM_PLC_W1_Bit_SetLowBatt := FALSE; **)
		(* assign - Stmt *)
		LD FALSE
		ST OM_PLC_W1_Bit_SetLowBatt

(** 	 **)
(** 	ManualStepDelay(IN := TRUE, PT := t#1s); **)
		(* call - Stmt *)
		CAL ManualStepDelay (
			IN := TRUE,
			PT := t#1s
		)

(** 	 **)
(** 	if ManualStepDelay.Q Then **)
		(* if - Cond *)
		LD ManualStepDelay.Q
		JMPCN ODK_SKIP_000000000000003_000000000000001

			(* then - Stmts *)

(** 		PLC_TX04_Bit_ChrgCmdL_A := TRUE; **)
			(* assign - Stmt *)
			LD TRUE
			ST PLC_TX04_Bit_ChrgCmdL_A

(** 		ManualStepDelay(IN := FALSE); **)
			(* call - Stmt *)
			CAL ManualStepDelay (
				IN := FALSE
			)

			JMP ODK_END_IF_000000000000003

(** 	end_if; **)
		(* if - End *) 
		ODK_SKIP_000000000000003_000000000000001:
		ODK_END_IF_000000000000003:

		JMP ODK_END_IF_000000000000001

(** 		 **)
(** elsif PLC_RX03_Bit_ChrgReqR_A = TRUE and PLC_TX01_Bit_ManMode = TRUE and PLC_RX03_Bit_Charging_R = FALSE then **)
	(* elseif - Cond *) 
	ODK_SKIP_000000000000001_000000000000001:
	LD PLC_RX03_Bit_ChrgReqR_A
	EQ TRUE
	AND ( PLC_TX01_Bit_ManMode
		EQ TRUE
	)
	AND ( PLC_RX03_Bit_Charging_R
		EQ FALSE
	)
	JMPCN ODK_SKIP_000000000000001_000000000000002

		(* elsif - Stmts *)

(** 	NDC8.SDIO.DigitalOutput16_Charger := TRUE; **)
		(* assign - Stmt *)
		LD TRUE
		ST NDC8.SDIO.DigitalOutput16_Charger

(** 	PLC_TX01_Bit_ChrgSelR_A := TRUE; **)
		(* assign - Stmt *)
		LD TRUE
		ST PLC_TX01_Bit_ChrgSelR_A

(** 	StopCharge := TRUE; **)
		(* assign - Stmt *)
		LD TRUE
		ST StopCharge

(** 	 **)
(** 	{* Full Charge Point check *} **)
(** 	if NDC8.PointTrigger.Bit14_Full_Chrg = FALSE then **)
		(* if - Cond *)
		LD NDC8.PointTrigger.Bit14_Full_Chrg
		EQ FALSE
		JMPCN ODK_SKIP_000000000000004_000000000000001

			(* then - Stmts *)

(** 		PLC_TX01_Bit_TRChg_Pnt := TRUE; **)
			(* assign - Stmt *)
			LD TRUE
			ST PLC_TX01_Bit_TRChg_Pnt

			JMP ODK_END_IF_000000000000004

(** 	else **)
		(* else *) 
		ODK_SKIP_000000000000004_000000000000001:

			(* else - Stmts *)

(** 		PLC_TX01_Bit_TRChg_Pnt := FALSE; **)
			(* assign - Stmt *)
			LD FALSE
			ST PLC_TX01_Bit_TRChg_Pnt

(** 	end_if; **)
		(* if - End *) 
		ODK_END_IF_000000000000004:

(** 	 **)
(** 	g_BattLim_NG := FALSE; **)
		(* assign - Stmt *)
		LD FALSE
		ST g_BattLim_NG

(** 	INPUT.LowBattery := FALSE; **)
		(* assign - Stmt *)
		LD FALSE
		ST INPUT.LowBattery

(** 	NDC8.Userdefined.LowBatSim := FALSE; **)
		(* assign - Stmt *)
		LD FALSE
		ST NDC8.Userdefined.LowBatSim

(** 	OM_PLC_W1_Bit_SetLowBatt := FALSE; **)
		(* assign - Stmt *)
		LD FALSE
		ST OM_PLC_W1_Bit_SetLowBatt

(** 	 **)
(** 	ManualStepDelay(IN := TRUE, PT := t#1s); **)
		(* call - Stmt *)
		CAL ManualStepDelay (
			IN := TRUE,
			PT := t#1s
		)

(** 	 **)
(** 	if ManualStepDelay.Q Then **)
		(* if - Cond *)
		LD ManualStepDelay.Q
		JMPCN ODK_SKIP_000000000000005_000000000000001

			(* then - Stmts *)

(** 		PLC_TX04_Bit_ChrgCmdR_A := TRUE; **)
			(* assign - Stmt *)
			LD TRUE
			ST PLC_TX04_Bit_ChrgCmdR_A

(** 		ManualStepDelay(IN := FALSE); **)
			(* call - Stmt *)
			CAL ManualStepDelay (
				IN := FALSE
			)

			JMP ODK_END_IF_000000000000005

(** 	end_if; **)
		(* if - End *) 
		ODK_SKIP_000000000000005_000000000000001:
		ODK_END_IF_000000000000005:

		JMP ODK_END_IF_000000000000001

(** 		 **)
(** elsif (PLC_RX03_Bit_ChrgReqL_A = FALSE and PLC_RX03_Bit_ChrgReqR_A = FALSE) and PLC_TX01_Bit_ManMode = TRUE then **)
	(* elseif - Cond *) 
	ODK_SKIP_000000000000001_000000000000002:
	LD PLC_RX03_Bit_ChrgReqL_A
	EQ FALSE
	AND ( PLC_RX03_Bit_ChrgReqR_A
		EQ FALSE
	)
	AND ( PLC_TX01_Bit_ManMode
		EQ TRUE
	)
	JMPCN ODK_SKIP_000000000000001_000000000000003

		(* elsif - Stmts *)

(** 	NDC8.SDIO.DigitalOutput16_Charger := FALSE; **)
		(* assign - Stmt *)
		LD FALSE
		ST NDC8.SDIO.DigitalOutput16_Charger

(**  **)
(** 	PLC_TX04_Bit_ChrgCmdL_A := FALSE; **)
		(* assign - Stmt *)
		LD FALSE
		ST PLC_TX04_Bit_ChrgCmdL_A

(** 	PLC_TX04_Bit_ChrgCmdR_A := FALSE; **)
		(* assign - Stmt *)
		LD FALSE
		ST PLC_TX04_Bit_ChrgCmdR_A

(** 	 **)
(** 	PLC_TX01_Bit_TRChg_Pnt := FALSE; **)
		(* assign - Stmt *)
		LD FALSE
		ST PLC_TX01_Bit_TRChg_Pnt

(** 	 **)
(** 	ManualStepDelay(IN := TRUE, PT := t#1s); **)
		(* call - Stmt *)
		CAL ManualStepDelay (
			IN := TRUE,
			PT := t#1s
		)

(** 	 **)
(** 	if ManualStepDelay.Q Then **)
		(* if - Cond *)
		LD ManualStepDelay.Q
		JMPCN ODK_SKIP_000000000000006_000000000000001

			(* then - Stmts *)

(** 		PLC_TX01_Bit_ChrgSelL_A := FALSE; **)
			(* assign - Stmt *)
			LD FALSE
			ST PLC_TX01_Bit_ChrgSelL_A

(** 		PLC_TX01_Bit_ChrgSelR_A := FALSE; **)
			(* assign - Stmt *)
			LD FALSE
			ST PLC_TX01_Bit_ChrgSelR_A

(** 		StopCharge := FALSE; **)
			(* assign - Stmt *)
			LD FALSE
			ST StopCharge

(** 		ManualStepDelay(IN := FALSE); **)
			(* call - Stmt *)
			CAL ManualStepDelay (
				IN := FALSE
			)

(** 		INPUT.LowBattery := FALSE; **)
			(* assign - Stmt *)
			LD FALSE
			ST INPUT.LowBattery

			JMP ODK_END_IF_000000000000006

(** 	end_if; **)
		(* if - End *) 
		ODK_SKIP_000000000000006_000000000000001:
		ODK_END_IF_000000000000006:

		JMP ODK_END_IF_000000000000001

(** 	 **)
(** end_if; **)
	(* if - End *) 
	ODK_SKIP_000000000000001_000000000000003:
	ODK_END_IF_000000000000001:

(**  **)
(**  **)
(** case AutoChargeStep of **)
(**  **)
(** 	0: **)
	(* case - Elm *) 
	ODK_SKIP_000000000000007_000000000000000:

	(* case - Cond *)
	LD AutoChargeStep
	EQ 0
	JMPC ODK_CASE_000000000000007_000000000000001

	JMP ODK_SKIP_000000000000007_000000000000001

	(* case - Stmts *) 
	ODK_CASE_000000000000007_000000000000001:

(** 		 **)
(** 		if (INPUT.Auto = TRUE and NDC8.Automatic.ExecDriveCommand = FALSE ) and  **)
(** 			((NDC8.PointTrigger.Bit9_Chrg_Right = TRUE and NDC8.PointTrigger.Bit10_Chrg_Left = FALSE) or (NDC8.PointTrigger.Bit9_Chrg_Right = FALSE and NDC8.PointTrigger.Bit10_Chrg_Left = TRUE)) and **)
(** 			(PLC_RX01_Bit_ChrgEmg = FALSE) then **)
		(* if - Cond *)
		LD INPUT.Auto
		EQ TRUE
		AND ( NDC8.Automatic.ExecDriveCommand
			EQ FALSE
		)
		AND ( NDC8.PointTrigger.Bit9_Chrg_Right
			EQ TRUE
			AND ( NDC8.PointTrigger.Bit10_Chrg_Left
				EQ FALSE
			)
			OR ( NDC8.PointTrigger.Bit9_Chrg_Right
				EQ FALSE
				AND ( NDC8.PointTrigger.Bit10_Chrg_Left
					EQ TRUE
				)
			)
		)
		AND ( PLC_RX01_Bit_ChrgEmg
			EQ FALSE
		)
		JMPCN ODK_SKIP_000000000000008_000000000000001

			(* then - Stmts *)

(** 			AutoChargeStep := 70; **)
			(* assign - Stmt *)
			LD 70
			ST AutoChargeStep

(** 			g_ChargeDone := FALSE; **)
			(* assign - Stmt *)
			LD FALSE
			ST g_ChargeDone

(** 			ChargePnt := NDC8.LayoutPosition.Point; **)
			(* assign - Stmt *)
			LD NDC8.LayoutPosition.Point
			ST ChargePnt

			JMP ODK_END_IF_000000000000008

(** 		end_if; **)
		(* if - End *) 
		ODK_SKIP_000000000000008_000000000000001:
		ODK_END_IF_000000000000008:

(** 		 **)
(** 		OM_PLC_Word9 := INT_TO_WORD(NDC8.OMPLC.Round_om); **)
		(* assign - Stmt *)
		LD NDC8.OMPLC.Round_om
		INT_TO_WORD 
		ST OM_PLC_Word9

(** 		 **)
(** 		OM_PLC_W9_Bit_ChgP_Err := FALSE; **)
		(* assign - Stmt *)
		LD FALSE
		ST OM_PLC_W9_Bit_ChgP_Err

(** 		 **)
(** 		NDC8.OMPLC.Round_om := WORD_TO_INT(OM_PLC_Word9); **)
		(* assign - Stmt *)
		LD OM_PLC_Word9
		WORD_TO_INT 
		ST NDC8.OMPLC.Round_om

		JMP ODK_END_CASE_000000000000007

(** 		 **)
(** {* Charge the battery Host Order *} **)
(** 	70:	 **)
	(* case - Elm *) 
	ODK_SKIP_000000000000007_000000000000001:

	(* case - Cond *)
	LD AutoChargeStep
	EQ 70
	JMPC ODK_CASE_000000000000007_000000000000002

	JMP ODK_SKIP_000000000000007_000000000000002

	(* case - Stmts *) 
	ODK_CASE_000000000000007_000000000000002:

(** 	 **)
(** 		if NDC8.PointTrigger.Bit9_Chrg_Right = TRUE and NDC8.PointTrigger.Bit10_Chrg_Left = FALSE then **)
		(* if - Cond *)
		LD NDC8.PointTrigger.Bit9_Chrg_Right
		EQ TRUE
		AND ( NDC8.PointTrigger.Bit10_Chrg_Left
			EQ FALSE
		)
		JMPCN ODK_SKIP_000000000000009_000000000000001

			(* then - Stmts *)

(** 			PLC_TX01_Bit_ChrgSelR_A := TRUE; **)
			(* assign - Stmt *)
			LD TRUE
			ST PLC_TX01_Bit_ChrgSelR_A

			JMP ODK_END_IF_000000000000009

(** 		elsif NDC8.PointTrigger.Bit9_Chrg_Right = FALSE and NDC8.PointTrigger.Bit10_Chrg_Left = TRUE then **)
		(* elseif - Cond *) 
		ODK_SKIP_000000000000009_000000000000001:
		LD NDC8.PointTrigger.Bit9_Chrg_Right
		EQ FALSE
		AND ( NDC8.PointTrigger.Bit10_Chrg_Left
			EQ TRUE
		)
		JMPCN ODK_SKIP_000000000000009_000000000000002

			(* elsif - Stmts *)

(** 			PLC_TX01_Bit_ChrgSelL_A := TRUE; **)
			(* assign - Stmt *)
			LD TRUE
			ST PLC_TX01_Bit_ChrgSelL_A

			JMP ODK_END_IF_000000000000009

(** 		end_if; **)
		(* if - End *) 
		ODK_SKIP_000000000000009_000000000000002:
		ODK_END_IF_000000000000009:

(** 		 **)
(** 		{* Full Charge Point check *} **)
(** 		if NDC8.PointTrigger.Bit14_Full_Chrg = FALSE then **)
		(* if - Cond *)
		LD NDC8.PointTrigger.Bit14_Full_Chrg
		EQ FALSE
		JMPCN ODK_SKIP_00000000000000A_000000000000001

			(* then - Stmts *)

(** 			PLC_TX01_Bit_TRChg_Pnt := TRUE; **)
			(* assign - Stmt *)
			LD TRUE
			ST PLC_TX01_Bit_TRChg_Pnt

			JMP ODK_END_IF_00000000000000A

(** 		else **)
		(* else *) 
		ODK_SKIP_00000000000000A_000000000000001:

			(* else - Stmts *)

(** 			PLC_TX01_Bit_TRChg_Pnt := FALSE; **)
			(* assign - Stmt *)
			LD FALSE
			ST PLC_TX01_Bit_TRChg_Pnt

(** 		end_if; **)
		(* if - End *) 
		ODK_END_IF_00000000000000A:

(** 		 **)
(** 		 **)
(** 		OM_PLC_Word9 := INT_TO_WORD(NDC8.OMPLC.Round_om); **)
		(* assign - Stmt *)
		LD NDC8.OMPLC.Round_om
		INT_TO_WORD 
		ST OM_PLC_Word9

(** 		 **)
(** 		PLC_TX01_Bit_Cancel_ST2 := not OM_PLC_W9_Bit_Enable_Err; **)
		(* assign - Stmt *)
		LD OM_PLC_W9_Bit_Enable_Err
		NOT
		ST PLC_TX01_Bit_Cancel_ST2

(** 		OM_PLC_W9_Bit_ChgP_Err := FALSE; **)
		(* assign - Stmt *)
		LD FALSE
		ST OM_PLC_W9_Bit_ChgP_Err

(** 		 **)
(** 		 **)
(** 		if NDC8.PLC_Application.TxStatusBit9_EStop = TRUE then **)
		(* if - Cond *)
		LD NDC8.PLC_Application.TxStatusBit9_EStop
		EQ TRUE
		JMPCN ODK_SKIP_00000000000000B_000000000000001

			(* then - Stmts *)

(** 			AutoChargeStep := 999; **)
			(* assign - Stmt *)
			LD 999
			ST AutoChargeStep

			JMP ODK_END_IF_00000000000000B

(** 		elsif PLC_RX01_Bit_ChrgEmg = TRUE then **)
		(* elseif - Cond *) 
		ODK_SKIP_00000000000000B_000000000000001:
		LD PLC_RX01_Bit_ChrgEmg
		EQ TRUE
		JMPCN ODK_SKIP_00000000000000B_000000000000002

			(* elsif - Stmts *)

(** 			AutoChargeStep := 999; **)
			(* assign - Stmt *)
			LD 999
			ST AutoChargeStep

			JMP ODK_END_IF_00000000000000B

(** 		elsif PLC_RX03_Bit_Round_ChgP = TRUE then **)
		(* elseif - Cond *) 
		ODK_SKIP_00000000000000B_000000000000002:
		LD PLC_RX03_Bit_Round_ChgP
		EQ TRUE
		JMPCN ODK_SKIP_00000000000000B_000000000000003

			(* elsif - Stmts *)

(** 			OM_PLC_W9_Bit_ChgP_Err := TRUE; **)
			(* assign - Stmt *)
			LD TRUE
			ST OM_PLC_W9_Bit_ChgP_Err

(** 			AutoChargeStep := 72; **)
			(* assign - Stmt *)
			LD 72
			ST AutoChargeStep

			JMP ODK_END_IF_00000000000000B

(** 		elsif PLC_RX01_Bit_ChrgBrk = TRUE then **)
		(* elseif - Cond *) 
		ODK_SKIP_00000000000000B_000000000000003:
		LD PLC_RX01_Bit_ChrgBrk
		EQ TRUE
		JMPCN ODK_SKIP_00000000000000B_000000000000004

			(* elsif - Stmts *)

(** 			AutoChargeStep := 72; **)
			(* assign - Stmt *)
			LD 72
			ST AutoChargeStep

			JMP ODK_END_IF_00000000000000B

(** 		elsif INPUT.Auto = FALSE then **)
		(* elseif - Cond *) 
		ODK_SKIP_00000000000000B_000000000000004:
		LD INPUT.Auto
		EQ FALSE
		JMPCN ODK_SKIP_00000000000000B_000000000000005

			(* elsif - Stmts *)

(** 			AutoChargeStep := 72; **)
			(* assign - Stmt *)
			LD 72
			ST AutoChargeStep

			JMP ODK_END_IF_00000000000000B

(** 		end_if; **)
		(* if - End *) 
		ODK_SKIP_00000000000000B_000000000000005:
		ODK_END_IF_00000000000000B:

(** 		 **)
(** 		NDC8.OMPLC.Round_om := WORD_TO_INT(OM_PLC_Word9); **)
		(* assign - Stmt *)
		LD OM_PLC_Word9
		WORD_TO_INT 
		ST NDC8.OMPLC.Round_om

(** 		 **)
(** 		StopCharge := TRUE; **)
		(* assign - Stmt *)
		LD TRUE
		ST StopCharge

(** 		 **)
(** 		 **)
(** 		 **)
(** 		{* Check Charge Idle*} **)
(** 		if PLC_RX03_Bit_CP_HP = TRUE then **)
		(* if - Cond *)
		LD PLC_RX03_Bit_CP_HP
		EQ TRUE
		JMPCN ODK_SKIP_00000000000000C_000000000000001

			(* then - Stmts *)

(** 			StepDelay(IN:=TRUE, PT:=t#2s); **)
			(* call - Stmt *)
			CAL StepDelay (
				IN := TRUE,
				PT := t#2s
			)

(** 			if StepDelay.Q then **)
			(* if - Cond *)
			LD StepDelay.Q
			JMPCN ODK_SKIP_00000000000000D_000000000000001

				(* then - Stmts *)

(** 				StepDelay(IN:=FALSE); **)
				(* call - Stmt *)
				CAL StepDelay (
					IN := FALSE
				)

(** 				AutoChargeStep := 71; **)
				(* assign - Stmt *)
				LD 71
				ST AutoChargeStep

				JMP ODK_END_IF_00000000000000D

(** 			end_if; **)
			(* if - End *) 
			ODK_SKIP_00000000000000D_000000000000001:
			ODK_END_IF_00000000000000D:

			JMP ODK_END_IF_00000000000000C

(** 		 **)
(** 		end_if; **)
		(* if - End *) 
		ODK_SKIP_00000000000000C_000000000000001:
		ODK_END_IF_00000000000000C:

		JMP ODK_END_CASE_000000000000007

(** 		 **)
(** 		 **)
(** 	71: **)
	(* case - Elm *) 
	ODK_SKIP_000000000000007_000000000000002:

	(* case - Cond *)
	LD AutoChargeStep
	EQ 71
	JMPC ODK_CASE_000000000000007_000000000000003

	JMP ODK_SKIP_000000000000007_000000000000003

	(* case - Stmts *) 
	ODK_CASE_000000000000007_000000000000003:

(** 	 **)
(** 		OM_PLC_Word9 := INT_TO_WORD(NDC8.OMPLC.Round_om); **)
		(* assign - Stmt *)
		LD NDC8.OMPLC.Round_om
		INT_TO_WORD 
		ST OM_PLC_Word9

(** 		 **)
(** 		PLC_TX01_Bit_Cancel_ST2 := not OM_PLC_W9_Bit_Enable_Err; **)
		(* assign - Stmt *)
		LD OM_PLC_W9_Bit_Enable_Err
		NOT
		ST PLC_TX01_Bit_Cancel_ST2

(** 		 **)
(** 		OM_PLC_W9_Bit_ChgP_Err := FALSE; **)
		(* assign - Stmt *)
		LD FALSE
		ST OM_PLC_W9_Bit_ChgP_Err

(** 		 **)
(** 		if NDC8.PLC_Application.TxStatusBit9_EStop = TRUE then **)
		(* if - Cond *)
		LD NDC8.PLC_Application.TxStatusBit9_EStop
		EQ TRUE
		JMPCN ODK_SKIP_00000000000000E_000000000000001

			(* then - Stmts *)

(** 			AutoChargeStep := 999; **)
			(* assign - Stmt *)
			LD 999
			ST AutoChargeStep

			JMP ODK_END_IF_00000000000000E

(** 		elsif PLC_RX01_Bit_ChrgEmg = TRUE then **)
		(* elseif - Cond *) 
		ODK_SKIP_00000000000000E_000000000000001:
		LD PLC_RX01_Bit_ChrgEmg
		EQ TRUE
		JMPCN ODK_SKIP_00000000000000E_000000000000002

			(* elsif - Stmts *)

(** 			AutoChargeStep := 999; **)
			(* assign - Stmt *)
			LD 999
			ST AutoChargeStep

			JMP ODK_END_IF_00000000000000E

(** 		elsif PLC_RX03_Bit_Round_ChgP = TRUE then **)
		(* elseif - Cond *) 
		ODK_SKIP_00000000000000E_000000000000002:
		LD PLC_RX03_Bit_Round_ChgP
		EQ TRUE
		JMPCN ODK_SKIP_00000000000000E_000000000000003

			(* elsif - Stmts *)

(** 			OM_PLC_W9_Bit_ChgP_Err := TRUE; **)
			(* assign - Stmt *)
			LD TRUE
			ST OM_PLC_W9_Bit_ChgP_Err

(** 			AutoChargeStep := 72; **)
			(* assign - Stmt *)
			LD 72
			ST AutoChargeStep

			JMP ODK_END_IF_00000000000000E

(** 		elsif PLC_RX01_Bit_ChrgBrk = TRUE then **)
		(* elseif - Cond *) 
		ODK_SKIP_00000000000000E_000000000000003:
		LD PLC_RX01_Bit_ChrgBrk
		EQ TRUE
		JMPCN ODK_SKIP_00000000000000E_000000000000004

			(* elsif - Stmts *)

(** 			AutoChargeStep := 72; **)
			(* assign - Stmt *)
			LD 72
			ST AutoChargeStep

			JMP ODK_END_IF_00000000000000E

(** 		elsif INPUT.Auto = FALSE then **)
		(* elseif - Cond *) 
		ODK_SKIP_00000000000000E_000000000000004:
		LD INPUT.Auto
		EQ FALSE
		JMPCN ODK_SKIP_00000000000000E_000000000000005

			(* elsif - Stmts *)

(** 			AutoChargeStep := 72; **)
			(* assign - Stmt *)
			LD 72
			ST AutoChargeStep

			JMP ODK_END_IF_00000000000000E

(** 		end_if; **)
		(* if - End *) 
		ODK_SKIP_00000000000000E_000000000000005:
		ODK_END_IF_00000000000000E:

(** 		 **)
(** 		NDC8.OMPLC.Round_om := WORD_TO_INT(OM_PLC_Word9); **)
		(* assign - Stmt *)
		LD OM_PLC_Word9
		WORD_TO_INT 
		ST NDC8.OMPLC.Round_om

(** 		 **)
(** 		PLC_TX04_Bit_ChrgCmdL_A := NDC8.PointTrigger.Bit10_Chrg_Left; **)
		(* assign - Stmt *)
		LD NDC8.PointTrigger.Bit10_Chrg_Left
		ST PLC_TX04_Bit_ChrgCmdL_A

(** 		PLC_TX04_Bit_ChrgCmdR_A := NDC8.PointTrigger.Bit9_Chrg_Right; **)
		(* assign - Stmt *)
		LD NDC8.PointTrigger.Bit9_Chrg_Right
		ST PLC_TX04_Bit_ChrgCmdR_A

(** 		 **)
(** 		NDC8.SDIO.DigitalOutput16_Charger := TRUE; **)
		(* assign - Stmt *)
		LD TRUE
		ST NDC8.SDIO.DigitalOutput16_Charger

(** 		 **)
(** 		OM_PLC_Word1 := INT_TO_WORD(NDC8.OMPLC.ChargeOM); **)
		(* assign - Stmt *)
		LD NDC8.OMPLC.ChargeOM
		INT_TO_WORD 
		ST OM_PLC_Word1

(** 		OM_PLC_Word2 := INT_TO_WORD(NDC8.OMPLC.Stop_OM); **)
		(* assign - Stmt *)
		LD NDC8.OMPLC.Stop_OM
		INT_TO_WORD 
		ST OM_PLC_Word2

(** 		 **)
(** 		 **)
(** 		g_BattLim_NG := FALSE; **)
		(* assign - Stmt *)
		LD FALSE
		ST g_BattLim_NG

(** 		INPUT.LowBattery := FALSE; **)
		(* assign - Stmt *)
		LD FALSE
		ST INPUT.LowBattery

(** 		NDC8.Userdefined.LowBatSim := FALSE; **)
		(* assign - Stmt *)
		LD FALSE
		ST NDC8.Userdefined.LowBatSim

(** 		OM_PLC_W1_Bit_SetLowBatt := FALSE; **)
		(* assign - Stmt *)
		LD FALSE
		ST OM_PLC_W1_Bit_SetLowBatt

(** 		 **)
(**  **)
(** 		if NDC8.PointTrigger.Bit14_Full_Chrg = TRUE then **)
		(* if - Cond *)
		LD NDC8.PointTrigger.Bit14_Full_Chrg
		EQ TRUE
		JMPCN ODK_SKIP_00000000000000F_000000000000001

			(* then - Stmts *)

(** 			if (g_ChargeDone or PLC_RX01_Bit_ChrgEmg) then **)
			(* if - Cond *)
			LD g_ChargeDone
			OR PLC_RX01_Bit_ChrgEmg
			JMPCN ODK_SKIP_00000000000000G_000000000000001

				(* then - Stmts *)

(** 				AutoChargeStep := 72; **)
				(* assign - Stmt *)
				LD 72
				ST AutoChargeStep

				JMP ODK_END_IF_00000000000000G

(** 			end_if; **)
			(* if - End *) 
			ODK_SKIP_00000000000000G_000000000000001:
			ODK_END_IF_00000000000000G:

			JMP ODK_END_IF_00000000000000F

(** 		else **)
		(* else *) 
		ODK_SKIP_00000000000000F_000000000000001:

			(* else - Stmts *)

(** 			if (NDC8.Automatic.ExecDriveCommand = TRUE or PLC_RX01_Bit_ChrgEmg) or g_ChargeDone or FastChargeTimeOver then **)
			(* if - Cond *)
			LD NDC8.Automatic.ExecDriveCommand
			EQ TRUE
			OR PLC_RX01_Bit_ChrgEmg
			OR g_ChargeDone
			OR FastChargeTimeOver
			JMPCN ODK_SKIP_00000000000000H_000000000000001

				(* then - Stmts *)

(** 				AutoChargeStep := 72; **)
				(* assign - Stmt *)
				LD 72
				ST AutoChargeStep

				JMP ODK_END_IF_00000000000000H

(** 			end_if; **)
			(* if - End *) 
			ODK_SKIP_00000000000000H_000000000000001:
			ODK_END_IF_00000000000000H:

(** 		end_if; **)
		(* if - End *) 
		ODK_END_IF_00000000000000F:

		JMP ODK_END_CASE_000000000000007

(** 		 **)
(** 	72: **)
	(* case - Elm *) 
	ODK_SKIP_000000000000007_000000000000003:

	(* case - Cond *)
	LD AutoChargeStep
	EQ 72
	JMPC ODK_CASE_000000000000007_000000000000004

	JMP ODK_SKIP_000000000000007_000000000000004

	(* case - Stmts *) 
	ODK_CASE_000000000000007_000000000000004:

(** 	 **)
(** 		OM_PLC_Word9 := INT_TO_WORD(NDC8.OMPLC.Round_om); **)
		(* assign - Stmt *)
		LD NDC8.OMPLC.Round_om
		INT_TO_WORD 
		ST OM_PLC_Word9

(** 		 **)
(** 		PLC_TX01_Bit_Cancel_ST2 := not OM_PLC_W9_Bit_Enable_Err; **)
		(* assign - Stmt *)
		LD OM_PLC_W9_Bit_Enable_Err
		NOT
		ST PLC_TX01_Bit_Cancel_ST2

(** 		 **)
(** 		NDC8.OMPLC.Round_om := WORD_TO_INT(OM_PLC_Word9); **)
		(* assign - Stmt *)
		LD OM_PLC_Word9
		WORD_TO_INT 
		ST NDC8.OMPLC.Round_om

(** 		 **)
(** 		if PLC_RX01_Bit_ChrgEmg = TRUE then **)
		(* if - Cond *)
		LD PLC_RX01_Bit_ChrgEmg
		EQ TRUE
		JMPCN ODK_SKIP_00000000000000I_000000000000001

			(* then - Stmts *)

(** 			AutoChargeStep := 999; **)
			(* assign - Stmt *)
			LD 999
			ST AutoChargeStep

			JMP ODK_END_IF_00000000000000I

(** 		end_if; **)
		(* if - End *) 
		ODK_SKIP_00000000000000I_000000000000001:
		ODK_END_IF_00000000000000I:

(** 		 **)
(** 		if NDC8.PLC_Application.TxStatusBit9_EStop = TRUE then **)
		(* if - Cond *)
		LD NDC8.PLC_Application.TxStatusBit9_EStop
		EQ TRUE
		JMPCN ODK_SKIP_00000000000000J_000000000000001

			(* then - Stmts *)

(** 			AutoChargeStep := 999; **)
			(* assign - Stmt *)
			LD 999
			ST AutoChargeStep

			JMP ODK_END_IF_00000000000000J

(** 		end_if; **)
		(* if - End *) 
		ODK_SKIP_00000000000000J_000000000000001:
		ODK_END_IF_00000000000000J:

(** 		 **)
(** 		PLC_TX04_Bit_ChrgCmdL_A := FALSE; **)
		(* assign - Stmt *)
		LD FALSE
		ST PLC_TX04_Bit_ChrgCmdL_A

(** 		PLC_TX04_Bit_ChrgCmdR_A := FALSE; **)
		(* assign - Stmt *)
		LD FALSE
		ST PLC_TX04_Bit_ChrgCmdR_A

(** 		 **)
(** 			 **)
(** 		NDC8.SDIO.DigitalOutput16_Charger := FALSE; **)
		(* assign - Stmt *)
		LD FALSE
		ST NDC8.SDIO.DigitalOutput16_Charger

(** 	 **)
(** 		OM_PLC_Word1 := INT_TO_WORD(NDC8.OMPLC.ChargeOM); **)
		(* assign - Stmt *)
		LD NDC8.OMPLC.ChargeOM
		INT_TO_WORD 
		ST OM_PLC_Word1

(**  **)
(** 		OM_PLC_W1_Bit_SetLowBatt := FALSE; **)
		(* assign - Stmt *)
		LD FALSE
		ST OM_PLC_W1_Bit_SetLowBatt

(**  **)
(** 		NDC8.OMPLC.ChargeOM := WORD_TO_INT(OM_PLC_Word1); **)
		(* assign - Stmt *)
		LD OM_PLC_Word1
		WORD_TO_INT 
		ST NDC8.OMPLC.ChargeOM

(** 	 **)
(** 		StepDelay(IN:=TRUE, PT:=t#5s); **)
		(* call - Stmt *)
		CAL StepDelay (
			IN := TRUE,
			PT := t#5s
		)

(** 		if StepDelay.Q then **)
		(* if - Cond *)
		LD StepDelay.Q
		JMPCN ODK_SKIP_00000000000000K_000000000000001

			(* then - Stmts *)

(** 			StepDelay(IN:=FALSE); **)
			(* call - Stmt *)
			CAL StepDelay (
				IN := FALSE
			)

(** 			AutoChargeStep := 73; **)
			(* assign - Stmt *)
			LD 73
			ST AutoChargeStep

			JMP ODK_END_IF_00000000000000K

(** 		end_if; **)
		(* if - End *) 
		ODK_SKIP_00000000000000K_000000000000001:
		ODK_END_IF_00000000000000K:

		JMP ODK_END_CASE_000000000000007

(** 		 **)
(** 	73: **)
	(* case - Elm *) 
	ODK_SKIP_000000000000007_000000000000004:

	(* case - Cond *)
	LD AutoChargeStep
	EQ 73
	JMPC ODK_CASE_000000000000007_000000000000005

	JMP ODK_SKIP_000000000000007_000000000000005

	(* case - Stmts *) 
	ODK_CASE_000000000000007_000000000000005:

(** 		 **)
(** 		PLC_TX01_Bit_ChrgSelL_A := FALSE; **)
		(* assign - Stmt *)
		LD FALSE
		ST PLC_TX01_Bit_ChrgSelL_A

(** 		PLC_TX01_Bit_ChrgSelR_A := FALSE; **)
		(* assign - Stmt *)
		LD FALSE
		ST PLC_TX01_Bit_ChrgSelR_A

(** 		 **)
(** 		OM_PLC_Word9 := INT_TO_WORD(NDC8.OMPLC.Round_om); **)
		(* assign - Stmt *)
		LD NDC8.OMPLC.Round_om
		INT_TO_WORD 
		ST OM_PLC_Word9

(** 		 **)
(** 		PLC_TX01_Bit_Cancel_ST2 := not OM_PLC_W9_Bit_Enable_Err; **)
		(* assign - Stmt *)
		LD OM_PLC_W9_Bit_Enable_Err
		NOT
		ST PLC_TX01_Bit_Cancel_ST2

(** 		 **)
(** 		NDC8.OMPLC.Round_om := WORD_TO_INT(OM_PLC_Word9); **)
		(* assign - Stmt *)
		LD OM_PLC_Word9
		WORD_TO_INT 
		ST NDC8.OMPLC.Round_om

(** 	 **)
(** 		if PLC_RX01_Bit_ChrgEmg = TRUE then **)
		(* if - Cond *)
		LD PLC_RX01_Bit_ChrgEmg
		EQ TRUE
		JMPCN ODK_SKIP_00000000000000L_000000000000001

			(* then - Stmts *)

(** 			AutoChargeStep := 999; **)
			(* assign - Stmt *)
			LD 999
			ST AutoChargeStep

			JMP ODK_END_IF_00000000000000L

(** 		end_if; **)
		(* if - End *) 
		ODK_SKIP_00000000000000L_000000000000001:
		ODK_END_IF_00000000000000L:

(** 		 **)
(** 		if NDC8.PLC_Application.TxStatusBit9_EStop = TRUE then **)
		(* if - Cond *)
		LD NDC8.PLC_Application.TxStatusBit9_EStop
		EQ TRUE
		JMPCN ODK_SKIP_00000000000000M_000000000000001

			(* then - Stmts *)

(** 			AutoChargeStep := 999; **)
			(* assign - Stmt *)
			LD 999
			ST AutoChargeStep

			JMP ODK_END_IF_00000000000000M

(** 		end_if; **)
		(* if - End *) 
		ODK_SKIP_00000000000000M_000000000000001:
		ODK_END_IF_00000000000000M:

(** 		 **)
(** 		if PLC_RX03_Bit_CP_HP then  **)
		(* if - Cond *)
		LD PLC_RX03_Bit_CP_HP
		JMPCN ODK_SKIP_00000000000000N_000000000000001

			(* then - Stmts *)

(** 			StepDelay(IN:=TRUE, PT:=t#1s); **)
			(* call - Stmt *)
			CAL StepDelay (
				IN := TRUE,
				PT := t#1s
			)

(** 			if StepDelay.Q then **)
			(* if - Cond *)
			LD StepDelay.Q
			JMPCN ODK_SKIP_00000000000000O_000000000000001

				(* then - Stmts *)

(** 				StepDelay(IN:=FALSE); **)
				(* call - Stmt *)
				CAL StepDelay (
					IN := FALSE
				)

(** 				StopCharge := FALSE; **)
				(* assign - Stmt *)
				LD FALSE
				ST StopCharge

(** 				AutoChargeStep := 74; **)
				(* assign - Stmt *)
				LD 74
				ST AutoChargeStep

				JMP ODK_END_IF_00000000000000O

(** 			end_if; **)
			(* if - End *) 
			ODK_SKIP_00000000000000O_000000000000001:
			ODK_END_IF_00000000000000O:

			JMP ODK_END_IF_00000000000000N

(** 		end_if; **)
		(* if - End *) 
		ODK_SKIP_00000000000000N_000000000000001:
		ODK_END_IF_00000000000000N:

		JMP ODK_END_CASE_000000000000007

(** 		 **)
(** 	74: **)
	(* case - Elm *) 
	ODK_SKIP_000000000000007_000000000000005:

	(* case - Cond *)
	LD AutoChargeStep
	EQ 74
	JMPC ODK_CASE_000000000000007_000000000000006

	JMP ODK_SKIP_000000000000007_000000000000006

	(* case - Stmts *) 
	ODK_CASE_000000000000007_000000000000006:

(** 	 **)
(** 		OM_PLC_Word9 := INT_TO_WORD(NDC8.OMPLC.Round_om); **)
		(* assign - Stmt *)
		LD NDC8.OMPLC.Round_om
		INT_TO_WORD 
		ST OM_PLC_Word9

(** 		 **)
(** 		PLC_TX01_Bit_Cancel_ST2 := not OM_PLC_W9_Bit_Enable_Err; **)
		(* assign - Stmt *)
		LD OM_PLC_W9_Bit_Enable_Err
		NOT
		ST PLC_TX01_Bit_Cancel_ST2

(** 		 **)
(** 		NDC8.OMPLC.Round_om := WORD_TO_INT(OM_PLC_Word9); **)
		(* assign - Stmt *)
		LD OM_PLC_Word9
		WORD_TO_INT 
		ST NDC8.OMPLC.Round_om

(** 		 **)
(** 		if PLC_RX01_Bit_ChrgEmg = TRUE then **)
		(* if - Cond *)
		LD PLC_RX01_Bit_ChrgEmg
		EQ TRUE
		JMPCN ODK_SKIP_00000000000000P_000000000000001

			(* then - Stmts *)

(** 			AutoChargeStep := 999; **)
			(* assign - Stmt *)
			LD 999
			ST AutoChargeStep

			JMP ODK_END_IF_00000000000000P

(** 		end_if; **)
		(* if - End *) 
		ODK_SKIP_00000000000000P_000000000000001:
		ODK_END_IF_00000000000000P:

(** 		 **)
(** 		if NDC8.PLC_Application.TxStatusBit9_EStop = TRUE then **)
		(* if - Cond *)
		LD NDC8.PLC_Application.TxStatusBit9_EStop
		EQ TRUE
		JMPCN ODK_SKIP_00000000000000Q_000000000000001

			(* then - Stmts *)

(** 			AutoChargeStep := 999; **)
			(* assign - Stmt *)
			LD 999
			ST AutoChargeStep

			JMP ODK_END_IF_00000000000000Q

(** 		end_if; **)
		(* if - End *) 
		ODK_SKIP_00000000000000Q_000000000000001:
		ODK_END_IF_00000000000000Q:

(** 		 **)
(** 		if INPUT.Auto = FALSE then **)
		(* if - Cond *)
		LD INPUT.Auto
		EQ FALSE
		JMPCN ODK_SKIP_00000000000000R_000000000000001

			(* then - Stmts *)

(** 			AutoChargeStep := 0; **)
			(* assign - Stmt *)
			LD 0
			ST AutoChargeStep

			JMP ODK_END_IF_00000000000000R

(** 		end_if; **)
		(* if - End *) 
		ODK_SKIP_00000000000000R_000000000000001:
		ODK_END_IF_00000000000000R:

(** 		 **)
(** 		if NDC8.LayoutPosition.Point <> ChargePnt or NDC8.PLC_Application.TxStatusBit4_LowBatt = TRUE then **)
		(* if - Cond *)
		LD NDC8.LayoutPosition.Point
		NE ChargePnt
		OR ( NDC8.PLC_Application.TxStatusBit4_LowBatt
			EQ TRUE
		)
		JMPCN ODK_SKIP_00000000000000S_000000000000001

			(* then - Stmts *)

(** 			AutoChargeStep := 0; **)
			(* assign - Stmt *)
			LD 0
			ST AutoChargeStep

			JMP ODK_END_IF_00000000000000S

(** 		end_if; **)
		(* if - End *) 
		ODK_SKIP_00000000000000S_000000000000001:
		ODK_END_IF_00000000000000S:

		JMP ODK_END_CASE_000000000000007

(** 		 **)
(** 		 **)
(** 	999: **)
	(* case - Elm *) 
	ODK_SKIP_000000000000007_000000000000006:

	(* case - Cond *)
	LD AutoChargeStep
	EQ 999
	JMPC ODK_CASE_000000000000007_000000000000007

	JMP ODK_SKIP_000000000000007_000000000000007

	(* case - Stmts *) 
	ODK_CASE_000000000000007_000000000000007:

(** 		PLC_TX04_Bit_ChrgCmdL_A := FALSE; **)
		(* assign - Stmt *)
		LD FALSE
		ST PLC_TX04_Bit_ChrgCmdL_A

(** 		PLC_TX04_Bit_ChrgCmdR_A := FALSE; **)
		(* assign - Stmt *)
		LD FALSE
		ST PLC_TX04_Bit_ChrgCmdR_A

(** 		 **)
(** 		PLC_TX01_Bit_TRChg_Pnt := FALSE; **)
		(* assign - Stmt *)
		LD FALSE
		ST PLC_TX01_Bit_TRChg_Pnt

(** 		 **)
(** 		StepDelay(IN:=TRUE, PT:=t#1s); **)
		(* call - Stmt *)
		CAL StepDelay (
			IN := TRUE,
			PT := t#1s
		)

(** 		if StepDelay.Q then **)
		(* if - Cond *)
		LD StepDelay.Q
		JMPCN ODK_SKIP_00000000000000T_000000000000001

			(* then - Stmts *)

(** 			StepDelay(IN:=FALSE); **)
			(* call - Stmt *)
			CAL StepDelay (
				IN := FALSE
			)

(** 			PLC_TX01_Bit_ChrgSelL_A := FALSE; **)
			(* assign - Stmt *)
			LD FALSE
			ST PLC_TX01_Bit_ChrgSelL_A

(** 			PLC_TX01_Bit_ChrgSelR_A := FALSE; **)
			(* assign - Stmt *)
			LD FALSE
			ST PLC_TX01_Bit_ChrgSelR_A

(** 			AutoChargeStep := 0; **)
			(* assign - Stmt *)
			LD 0
			ST AutoChargeStep

(** 			INPUT.LowBattery := FALSE; **)
			(* assign - Stmt *)
			LD FALSE
			ST INPUT.LowBattery

			JMP ODK_END_IF_00000000000000T

(** 		end_if; **)
		(* if - End *) 
		ODK_SKIP_00000000000000T_000000000000001:
		ODK_END_IF_00000000000000T:

(** 		 **)
(** 			 **)
(** 		NDC8.SDIO.DigitalOutput16_Charger := FALSE; **)
		(* assign - Stmt *)
		LD FALSE
		ST NDC8.SDIO.DigitalOutput16_Charger

(** 	 **)
(** 		OM_PLC_Word1 := INT_TO_WORD(NDC8.OMPLC.ChargeOM); **)
		(* assign - Stmt *)
		LD NDC8.OMPLC.ChargeOM
		INT_TO_WORD 
		ST OM_PLC_Word1

(**  **)
(** 		OM_PLC_W1_Bit_SetLowBatt := FALSE; **)
		(* assign - Stmt *)
		LD FALSE
		ST OM_PLC_W1_Bit_SetLowBatt

(**  **)
(** 		NDC8.OMPLC.ChargeOM := WORD_TO_INT(OM_PLC_Word1); **)
		(* assign - Stmt *)
		LD OM_PLC_Word1
		WORD_TO_INT 
		ST NDC8.OMPLC.ChargeOM

(** 	 **)
(** 		StopCharge := FALSE; **)
		(* assign - Stmt *)
		LD FALSE
		ST StopCharge

		JMP ODK_END_CASE_000000000000007

(** 		 **)
(**  **)
(** end_case; **)
	(* case - End *) 
	ODK_SKIP_000000000000007_000000000000007:
	ODK_END_CASE_000000000000007:

(**  **)
(** {* Charge Complete Check *} **)
(** if (NDC8.PointTrigger.Bit9_Chrg_Right = TRUE or NDC8.PointTrigger.Bit10_Chrg_Left = TRUE) or PLC_TX01_Bit_ManMode = TRUE then  **)
	(* if - Cond *)
	LD NDC8.PointTrigger.Bit9_Chrg_Right
	EQ TRUE
	OR ( NDC8.PointTrigger.Bit10_Chrg_Left
		EQ TRUE
	)
	OR ( PLC_TX01_Bit_ManMode
		EQ TRUE
	)
	JMPCN ODK_SKIP_00000000000000U_000000000000001

		(* then - Stmts *)

(** 	if(NDC8.CAN_IO_3.DigitalInput5_BatTmp25_i = TRUE and  **)
(** 		NDC8.CAN_IO_3.DigitalInput6_BatTmp40_i = TRUE and **)
(** 		NDC8.CAN_IO_3.DigitalInput7_BatTmp55_i = TRUE and  **)
(** 		g_BatteryVoltage >= NDC8.UserDefined.Integer32_40_ChgComV1) then **)
		(* if - Cond *)
		LD NDC8.CAN_IO_3.DigitalInput5_BatTmp25_i
		EQ TRUE
		AND ( NDC8.CAN_IO_3.DigitalInput6_BatTmp40_i
			EQ TRUE
		)
		AND ( NDC8.CAN_IO_3.DigitalInput7_BatTmp55_i
			EQ TRUE
		)
		AND ( g_BatteryVoltage
			GE NDC8.Userdefined.Integer32_40_ChgComV1
		)
		JMPCN ODK_SKIP_00000000000000V_000000000000001

			(* then - Stmts *)

(** 		g_ChargeDone := TRUE; **)
			(* assign - Stmt *)
			LD TRUE
			ST g_ChargeDone

(** 		g_ChargeTempErr := FALSE; **)
			(* assign - Stmt *)
			LD FALSE
			ST g_ChargeTempErr

			JMP ODK_END_IF_00000000000000V

(** 	elsif (NDC8.CAN_IO_3.DigitalInput5_BatTmp25_i = FALSE and  **)
(** 		NDC8.CAN_IO_3.DigitalInput6_BatTmp40_i = TRUE and **)
(** 		NDC8.CAN_IO_3.DigitalInput7_BatTmp55_i = TRUE and  **)
		(* elseif - Cond *) 
		ODK_SKIP_00000000000000V_000000000000001:
		LD NDC8.CAN_IO_3.DigitalInput5_BatTmp25_i
		EQ FALSE
		AND ( NDC8.CAN_IO_3.DigitalInput6_BatTmp40_i
			EQ TRUE
		)
		AND ( NDC8.CAN_IO_3.DigitalInput7_BatTmp55_i
			EQ TRUE
		)
		AND ( g_BatteryVoltage
(** 		g_BatteryVoltage >= NDC8.UserDefined.Integer32_41_ChgComV2) then **)
			GE NDC8.Userdefined.Integer32_41_ChgComV2
		)
		JMPCN ODK_SKIP_00000000000000V_000000000000002

			(* elsif - Stmts *)

(** 		g_ChargeDone := TRUE; **)
			(* assign - Stmt *)
			LD TRUE
			ST g_ChargeDone

(** 		g_ChargeTempErr := FALSE; **)
			(* assign - Stmt *)
			LD FALSE
			ST g_ChargeTempErr

			JMP ODK_END_IF_00000000000000V

(** 	elsif (NDC8.CAN_IO_3.DigitalInput5_BatTmp25_i = FALSE and  **)
(** 		NDC8.CAN_IO_3.DigitalInput6_BatTmp40_i = FALSE and **)
(** 		NDC8.CAN_IO_3.DigitalInput7_BatTmp55_i = TRUE and  **)
		(* elseif - Cond *) 
		ODK_SKIP_00000000000000V_000000000000002:
		LD NDC8.CAN_IO_3.DigitalInput5_BatTmp25_i
		EQ FALSE
		AND ( NDC8.CAN_IO_3.DigitalInput6_BatTmp40_i
			EQ FALSE
		)
		AND ( NDC8.CAN_IO_3.DigitalInput7_BatTmp55_i
			EQ TRUE
		)
		AND ( g_BatteryVoltage
(** 		g_BatteryVoltage >= NDC8.UserDefined.Integer32_42_ChgComV3) then **)
			GE NDC8.Userdefined.Integer32_42_ChgComV3
		)
		JMPCN ODK_SKIP_00000000000000V_000000000000003

			(* elsif - Stmts *)

(** 		g_ChargeDone := TRUE; **)
			(* assign - Stmt *)
			LD TRUE
			ST g_ChargeDone

(** 		g_ChargeTempErr := FALSE; **)
			(* assign - Stmt *)
			LD FALSE
			ST g_ChargeTempErr

			JMP ODK_END_IF_00000000000000V

(** 	elsif (NDC8.CAN_IO_3.DigitalInput5_BatTmp25_i = FALSE and  **)
(** 		NDC8.CAN_IO_3.DigitalInput6_BatTmp40_i = FALSE and **)
		(* elseif - Cond *) 
		ODK_SKIP_00000000000000V_000000000000003:
		LD NDC8.CAN_IO_3.DigitalInput5_BatTmp25_i
		EQ FALSE
		AND ( NDC8.CAN_IO_3.DigitalInput6_BatTmp40_i
			EQ FALSE
		)
		AND ( NDC8.CAN_IO_3.DigitalInput7_BatTmp55_i
(** 		NDC8.CAN_IO_3.DigitalInput7_BatTmp55_i = FALSE) then **)
			EQ FALSE
		)
		JMPCN ODK_SKIP_00000000000000V_000000000000004

			(* elsif - Stmts *)

(** 		g_ChargeDone := FALSE; **)
			(* assign - Stmt *)
			LD FALSE
			ST g_ChargeDone

(** 		g_ChargeTempErr := TRUE; **)
			(* assign - Stmt *)
			LD TRUE
			ST g_ChargeTempErr

			JMP ODK_END_IF_00000000000000V

(** 	else **)
		(* else *) 
		ODK_SKIP_00000000000000V_000000000000004:

			(* else - Stmts *)

(** 		g_ChargeDone := FALSE; **)
			(* assign - Stmt *)
			LD FALSE
			ST g_ChargeDone

(** 		g_ChargeTempErr := FALSE; **)
			(* assign - Stmt *)
			LD FALSE
			ST g_ChargeTempErr

(** 	end_if; **)
		(* if - End *) 
		ODK_END_IF_00000000000000V:

		JMP ODK_END_IF_00000000000000U

(** 	 **)
(** elsif (NDC8.CAN_IO_3.DigitalInput5_BatTmp25_i = FALSE and  **)
(** 		NDC8.CAN_IO_3.DigitalInput6_BatTmp40_i = FALSE and **)
	(* elseif - Cond *) 
	ODK_SKIP_00000000000000U_000000000000001:
	LD NDC8.CAN_IO_3.DigitalInput5_BatTmp25_i
	EQ FALSE
	AND ( NDC8.CAN_IO_3.DigitalInput6_BatTmp40_i
		EQ FALSE
	)
	AND ( NDC8.CAN_IO_3.DigitalInput7_BatTmp55_i
(** 		NDC8.CAN_IO_3.DigitalInput7_BatTmp55_i = FALSE) then **)
		EQ FALSE
	)
	JMPCN ODK_SKIP_00000000000000U_000000000000002

		(* elsif - Stmts *)

(**  **)
(** 	g_ChargeDone := FALSE; **)
		(* assign - Stmt *)
		LD FALSE
		ST g_ChargeDone

(** 	g_ChargeTempErr := TRUE;	 **)
		(* assign - Stmt *)
		LD TRUE
		ST g_ChargeTempErr

		JMP ODK_END_IF_00000000000000U

(** else **)
	(* else *) 
	ODK_SKIP_00000000000000U_000000000000002:

		(* else - Stmts *)

(** 	g_ChargeDone := FALSE; **)
		(* assign - Stmt *)
		LD FALSE
		ST g_ChargeDone

(** 	g_ChargeTempErr := FALSE; **)
		(* assign - Stmt *)
		LD FALSE
		ST g_ChargeTempErr

(** end_if; **)
	(* if - End *) 
	ODK_END_IF_00000000000000U:

(** 		 **)
(**  **)
(** {* Charge Over Time Check *} **)
(**  **)
(** 	ChargeFullFlag  := NDC8.SDIO.DigitalOutput16_Charger = TRUE and NDC8.PointTrigger.Bit14_Full_Chrg = TRUE; **)
	(* assign - Stmt *)
	LD NDC8.SDIO.DigitalOutput16_Charger
	EQ TRUE
	AND ( NDC8.PointTrigger.Bit14_Full_Chrg
		EQ TRUE
	)
	ST ChargeFullFlag

(** 	 **)
(** 	ChageTimer(IN:= ChargeFullFlag, PT:=t#1800s); **)
	(* call - Stmt *)
	CAL ChageTimer (
		IN := ChargeFullFlag,
		PT := t#1800s
	)

(** 	 **)
(** 	if ChageTimer.Q then **)
	(* if - Cond *)
	LD ChageTimer.Q
	JMPCN ODK_SKIP_00000000000000W_000000000000001

		(* then - Stmts *)

(** 		g_ChargeOverTime := TRUE; **)
		(* assign - Stmt *)
		LD TRUE
		ST g_ChargeOverTime

		JMP ODK_END_IF_00000000000000W

(** 	end_if; **)
	(* if - End *) 
	ODK_SKIP_00000000000000W_000000000000001:
	ODK_END_IF_00000000000000W:

(** 	 **)
(** 	if ChargeFullFlag = FALSE then **)
	(* if - Cond *)
	LD ChargeFullFlag
	EQ FALSE
	JMPCN ODK_SKIP_00000000000000X_000000000000001

		(* then - Stmts *)

(** 		g_ChargeOverTime := FALSE; **)
		(* assign - Stmt *)
		LD FALSE
		ST g_ChargeOverTime

		JMP ODK_END_IF_00000000000000X

(** 	end_if; **)
	(* if - End *) 
	ODK_SKIP_00000000000000X_000000000000001:
	ODK_END_IF_00000000000000X:

(** 	 **)
(** {* Fast Charge Time Check *} **)
(**  **)
(** 	FastChargeFlag := NDC8.SDIO.DigitalOutput16_Charger = TRUE and NDC8.PointTrigger.Bit14_Full_Chrg = FALSE; **)
	(* assign - Stmt *)
	LD NDC8.SDIO.DigitalOutput16_Charger
	EQ TRUE
	AND ( NDC8.PointTrigger.Bit14_Full_Chrg
		EQ FALSE
	)
	ST FastChargeFlag

(** 	 **)
(** 	FastChargeTimer(IN:= FastChargeFlag, PT:=t#600s); **)
	(* call - Stmt *)
	CAL FastChargeTimer (
		IN := FastChargeFlag,
		PT := t#600s
	)

(** 	 **)
(** 	 **)
(** 	if FastChargeTimer.Q then **)
	(* if - Cond *)
	LD FastChargeTimer.Q
	JMPCN ODK_SKIP_00000000000000Y_000000000000001

		(* then - Stmts *)

(** 		FastChargeTimeOver := TRUE; **)
		(* assign - Stmt *)
		LD TRUE
		ST FastChargeTimeOver

		JMP ODK_END_IF_00000000000000Y

(** 	end_if; **)
	(* if - End *) 
	ODK_SKIP_00000000000000Y_000000000000001:
	ODK_END_IF_00000000000000Y:

(** 	 **)
(** 	if FastChargeFlag = FALSE then **)
	(* if - Cond *)
	LD FastChargeFlag
	EQ FALSE
	JMPCN ODK_SKIP_00000000000000Z_000000000000001

		(* then - Stmts *)

(** 		FastChargeTimeOver := FALSE; **)
		(* assign - Stmt *)
		LD FALSE
		ST FastChargeTimeOver

		JMP ODK_END_IF_00000000000000Z

(** 	end_if; **)
	(* if - End *) 
	ODK_SKIP_00000000000000Z_000000000000001:
	ODK_END_IF_00000000000000Z:

(** 	 **)
(** {* Check BMS Error Status *} **)
(** if NDC8.SDIO.DigitalInput2_BTN_RST = FALSE and **)
(** 	(PLC_RX01_Bit_ChrgEmg = TRUE **)
(** 	or g_ChargeDone = TRUE  **)
(** 	or g_ChargeOverTime = TRUE **)
(** 	or g_ChargeTempErr = TRUE) then **)
	(* if - Cond *)
	LD NDC8.SDIO.DigitalInput2_BTN_RST
	EQ FALSE
	AND ( PLC_RX01_Bit_ChrgEmg
		EQ TRUE
		OR ( g_ChargeDone
			EQ TRUE
		)
		OR ( g_ChargeOverTime
			EQ TRUE
		)
		OR ( g_ChargeTempErr
			EQ TRUE
		)
	)
	JMPCN ODK_SKIP_000000000000010_000000000000001

		(* then - Stmts *)

(** 	 **)
(** 		PLC_TX04_Bit_ChrgCmdL_A := FALSE; **)
		(* assign - Stmt *)
		LD FALSE
		ST PLC_TX04_Bit_ChrgCmdL_A

(** 		PLC_TX04_Bit_ChrgCmdR_A := FALSE; **)
		(* assign - Stmt *)
		LD FALSE
		ST PLC_TX04_Bit_ChrgCmdR_A

(** 	 **)
(** 		NDC8.SDIO.DigitalOutput16_Charger := FALSE; **)
		(* assign - Stmt *)
		LD FALSE
		ST NDC8.SDIO.DigitalOutput16_Charger

(** 		 **)
(** 		CheckChargeDoneStepDelay(IN := TRUE, PT := t#1s); **)
		(* call - Stmt *)
		CAL CheckChargeDoneStepDelay (
			IN := TRUE,
			PT := t#1s
		)

(** 		 **)
(** 		if CheckChargeDoneStepDelay.Q then **)
		(* if - Cond *)
		LD CheckChargeDoneStepDelay.Q
		JMPCN ODK_SKIP_000000000000011_000000000000001

			(* then - Stmts *)

(** 			CheckChargeDoneStepDelay(IN := FALSE); **)
			(* call - Stmt *)
			CAL CheckChargeDoneStepDelay (
				IN := FALSE
			)

(** 			PLC_TX01_Bit_ChrgSelL_A := FALSE; **)
			(* assign - Stmt *)
			LD FALSE
			ST PLC_TX01_Bit_ChrgSelL_A

(** 			PLC_TX01_Bit_ChrgSelR_A := FALSE; **)
			(* assign - Stmt *)
			LD FALSE
			ST PLC_TX01_Bit_ChrgSelR_A

			JMP ODK_END_IF_000000000000011

(** 		end_if; **)
		(* if - End *) 
		ODK_SKIP_000000000000011_000000000000001:
		ODK_END_IF_000000000000011:

		JMP ODK_END_IF_000000000000010

(** 		 **)
(** 		 **)
(** end_if; **)
	(* if - End *) 
	ODK_SKIP_000000000000010_000000000000001:
	ODK_END_IF_000000000000010:

(**  **)
(**  **)
(** {* Let Vehicle Stop *} **)
(** {* **)
(** if PLC_TX04_Bit_ChrgCmdL_A = TRUE or PLC_TX04_Bit_ChrgCmdR_A = TRUE or  **)
(** 	PLC_RX03_Bit_CP_HP = FALSE or  **)
(** 	AutoChargeStep = 70 or AutoChargeStep = 71 or AutoChargeStep = 72 or AutoChargeStep = 73 then **)
(** 	StopCharge := TRUE; **)
(** end_if; **)
(** *} **)
(**  **)
(**  **)
(**  **)
(**  **)
(**  **)
(**  **)
(**  **)
(**  **)
(**  **)
(**  **)
(**  **)
(**  **)
(**  **)
(**  **)
(**  **)
(**  **)
(**  **)
(**  **)
(**  **)

END_FUNCTION_BLOCK